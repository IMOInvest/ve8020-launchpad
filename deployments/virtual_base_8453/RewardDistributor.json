{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.18\"},\"sources\":{\"contracts/RewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport {IVotingEscrow} from \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport {IRewardDistributor} from \\\"./interfaces/IRewardDistributor.sol\\\";\\nimport {IRewardFaucet} from \\\"./interfaces/IRewardFaucet.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/OptionalOnlyCaller.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\n\\n/**\\n * @title Reward Distributor\\n * @notice Distributes any tokens transferred to the contract among veBPT holders\\n * proportionally based on a snapshot of the week at which the tokens are sent to the RewardDistributor contract.\\n * @dev Supports distributing arbitrarily many different tokens. In order to start distributing a new token to veBPT\\n * holders simply transfer the tokens to the `RewardDistributor` contract and then call `checkpointToken`.\\n */\\ncontract RewardDistributor is\\n    IRewardDistributor,\\n    OptionalOnlyCaller,\\n    ReentrancyGuard\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    bool public isInitialized;\\n    IVotingEscrow private _votingEscrow;\\n    IRewardFaucet public rewardFaucet;\\n\\n    uint256 private _startTime;\\n\\n    // Global State\\n    uint256 private _timeCursor;\\n    mapping(uint256 => uint256) private _veSupplyCache;\\n\\n    address public admin;\\n    address[] private _rewardTokens;\\n    mapping(address => bool) public allowedRewardTokens;\\n\\n\\n    // Token State\\n\\n    // `startTime` and `timeCursor` are both timestamps so comfortably fit in a uint64.\\n    // `cachedBalance` will comfortably fit the total supply of any meaningful token.\\n    // Should more than 2^128 tokens be sent to this contract then checkpointing this token will fail until enough\\n    // tokens have been claimed to bring the total balance back below 2^128.\\n    struct TokenState {\\n        uint64 startTime;\\n        uint64 timeCursor;\\n        uint128 cachedBalance;\\n    }\\n\\n    mapping(IERC20 => TokenState) private _tokenState;\\n    mapping(IERC20 => mapping(uint256 => uint256)) private _tokensPerWeek;\\n\\n    // User State\\n\\n    // `startTime` and `timeCursor` are timestamps so will comfortably fit in a uint64.\\n    // For `lastEpochCheckpointed` to overflow would need over 2^128 transactions to the VotingEscrow contract.\\n    struct UserState {\\n        uint64 startTime;\\n        uint64 timeCursor;\\n        uint128 lastEpochCheckpointed;\\n    }\\n\\n    mapping(address => UserState) internal _userState;\\n    mapping(address => mapping(uint256 => uint256))\\n        private _userBalanceAtTimestamp;\\n    mapping(address => mapping(IERC20 => uint256)) private _userTokenTimeCursor;\\n\\n    constructor() EIP712(\\\"RewardDistributor\\\", \\\"1\\\") {}\\n\\n    modifier onlyAdmin() {\\n        require(admin == msg.sender, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        IVotingEscrow votingEscrow,\\n        IRewardFaucet rewardFaucet_,\\n        uint256 startTime,\\n        address admin_\\n    ) external {\\n        require(!isInitialized, \\\"!twice\\\");\\n        isInitialized = true;\\n\\n        require(admin_ != address(0) && address(rewardFaucet_) != address(0), \\\"!zero\\\");\\n        admin = admin_;\\n        rewardFaucet = rewardFaucet_;\\n        _votingEscrow = votingEscrow;\\n\\n        startTime = _roundDownTimestamp(startTime);\\n        uint256 currentWeek = _roundDownTimestamp(block.timestamp);\\n        require(startTime >= currentWeek, \\\"Cannot start before current week\\\");\\n        require(startTime <= currentWeek + 10 weeks, \\\"10 weeks delay max\\\");\\n\\n        if (startTime == currentWeek) {\\n            // We assume that `votingEscrow` has been deployed in a week previous to this one.\\n            // If `votingEscrow` did not have a non-zero supply at the beginning of the current week\\n            // then any tokens which are distributed this week will be lost permanently.\\n            require(\\n                votingEscrow.totalSupply(currentWeek) > 0,\\n                \\\"Zero total supply results in lost tokens\\\"\\n            );\\n        }\\n        _startTime = startTime;\\n        _timeCursor = startTime;\\n    }\\n\\n    /**\\n     * @notice Returns the VotingEscrow (veBPT) token contract\\n     */\\n    function getVotingEscrow()\\n        external\\n        view\\n        override\\n        returns (IVotingEscrow)\\n    {\\n        return _votingEscrow;\\n    }\\n\\n    /**\\n     * @notice Returns the global time cursor representing the most earliest uncheckpointed week.\\n     */\\n    function getTimeCursor() external view override returns (uint256) {\\n        return _timeCursor;\\n    }\\n\\n    /**\\n     * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.\\n     * @param user - The address of the user to query.\\n     */\\n    function getUserTimeCursor(\\n        address user\\n    ) external view override returns (uint256) {\\n        return _userState[user].timeCursor;\\n    }\\n\\n    /**\\n     * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getTokenTimeCursor(\\n        IERC20 token\\n    ) external view override returns (uint256) {\\n        return _tokenState[token].timeCursor;\\n    }\\n\\n    /**\\n     * @notice Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.\\n     * @param user - The address of the user to query.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getUserTokenTimeCursor(\\n        address user,\\n        IERC20 token\\n    ) external view override returns (uint256) {\\n        return _getUserTokenTimeCursor(user, token);\\n    }\\n\\n    /**\\n     * @notice Returns the user's cached balance of veBPT as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.\\n     * @param user - The address of the user of which to read the cached balance of.\\n     * @param timestamp - The timestamp at which to read the `user`'s cached balance at.\\n     */\\n    function getUserBalanceAtTimestamp(\\n        address user,\\n        uint256 timestamp\\n    ) external view override returns (uint256) {\\n        return _userBalanceAtTimestamp[user][timestamp];\\n    }\\n\\n    /**\\n     * @notice Returns the cached total supply of veBPT as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.\\n     * @param timestamp - The timestamp at which to read the cached total supply at.\\n     */\\n    function getTotalSupplyAtTimestamp(\\n        uint256 timestamp\\n    ) external view override returns (uint256) {\\n        return _veSupplyCache[timestamp];\\n    }\\n\\n    /**\\n     * @notice Returns the RewardDistributor's cached balance of `token`.\\n     */\\n    function getTokenLastBalance(\\n        IERC20 token\\n    ) external view override returns (uint256) {\\n        return _tokenState[token].cachedBalance;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of `token` which the RewardDistributor received in the week beginning at `timestamp`.\\n     * @param token - The ERC20 token address to query.\\n     * @param timestamp - The timestamp corresponding to the beginning of the week of interest.\\n     */\\n    function getTokensDistributedInWeek(\\n        IERC20 token,\\n        uint256 timestamp\\n    ) external view override returns (uint256) {\\n        return _tokensPerWeek[token][timestamp];\\n    }\\n\\n    // Depositing\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev Sending tokens directly to the RewardDistributor instead of using `depositToken` may result in tokens being\\n     * retroactively distributed to past weeks, or for the distribution to carry over to future weeks.\\n     *\\n     * If for some reason `depositToken` cannot be called, in order to ensure that all tokens are correctly distributed\\n     * manually call `checkpointToken` before and after the token transfer.\\n     * @param token - The ERC20 token address to distribute.\\n     * @param amount - The amount of tokens to deposit.\\n     */\\n    function depositToken(\\n        IERC20 token,\\n        uint256 amount\\n    ) external override nonReentrant {\\n        require(allowedRewardTokens[address(token)], \\\"!allowed\\\");\\n        _checkpointToken(token, false);\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        _checkpointToken(token, true);\\n        emit RewardDeposit(token, amount);\\n    }\\n\\n    /**\\n     * @notice Deposits tokens by faucet to be distributed in the current week.\\n     * @dev Sending tokens directly to the RewardDistributor instead of using `depositToken` may result in tokens being\\n     * retroactively distributed to past weeks, or for the distribution to carry over to future weeks.\\n     *\\n     * If for some reason `depositToken` cannot be called, in order to ensure that all tokens are correctly distributed\\n     * manually call `checkpointToken` before and after the token transfer.\\n     * @param token - The ERC20 token address to distribute.\\n     * @param amount - The amount of tokens to deposit.\\n     */\\n    function faucetDepositToken(\\n        IERC20 token,\\n        uint256 amount\\n    ) external {\\n        require(allowedRewardTokens[address(token)], \\\"!allowed\\\");\\n        require(msg.sender == address(rewardFaucet), \\\"only faucet\\\");\\n        _checkpointToken(token, false);\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        _checkpointToken(token, true);\\n    }\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev A version of `depositToken` which supports depositing multiple `tokens` at once.\\n     * See `depositToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to distribute.\\n     * @param amounts - An array of token amounts to deposit.\\n     */\\n    function depositTokens(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external override nonReentrant {\\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\\n\\n        uint256 length = tokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            require(allowedRewardTokens[address(tokens[i])], \\\"!allowed\\\");\\n            _checkpointToken(tokens[i], false);\\n            tokens[i].safeTransferFrom(msg.sender, address(this), amounts[i]);\\n            _checkpointToken(tokens[i], true);\\n            emit RewardDeposit(tokens[i], amounts[i]);\\n        }\\n    }\\n\\n    // Checkpointing\\n\\n    /**\\n     * @notice Caches the total supply of veBPT at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     */\\n    function checkpoint() external override nonReentrant {\\n        _checkpointTotalSupply();\\n    }\\n\\n    /**\\n     * @notice Caches the user's balance of veBPT at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param user - The address of the user to be checkpointed.\\n     */\\n    function checkpointUser(address user) external override nonReentrant {\\n        _checkpointUserBalance(user);\\n    }\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the RewardDistributor to weekly distributions.\\n     * @dev Any `token` balance held by the RewardDistributor above that which is returned by `getTokenLastBalance`\\n     * will be distributed evenly across the time period since `token` was last checkpointed.\\n     *\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param token - The ERC20 token address to be checkpointed.\\n     */\\n    function checkpointToken(IERC20 token) external override nonReentrant {\\n        require(allowedRewardTokens[address(token)], \\\"!allowed\\\");\\n        _checkpointToken(token, true);\\n    }\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the RewardDistributor to weekly distributions.\\n     * @dev A version of `checkpointToken` which supports checkpointing multiple tokens.\\n     * See `checkpointToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to be checkpointed.\\n     */\\n    function checkpointTokens(\\n        IERC20[] calldata tokens\\n    ) external override nonReentrant {\\n        uint256 tokensLength = tokens.length;\\n        for (uint256 i = 0; i < tokensLength; ++i) {\\n            require(allowedRewardTokens[address(tokens[i])], \\\"!allowed\\\");\\n            _checkpointToken(tokens[i], true);\\n        }\\n    }\\n\\n    // Claiming\\n\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the RewardDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(\\n        address user,\\n        IERC20 token\\n    )\\n        external\\n        override\\n        nonReentrant\\n        optionalOnlyCaller(user)\\n        returns (uint256)\\n    {\\n        require(allowedRewardTokens[address(token)], \\\"!allowed\\\");\\n        _checkpointTotalSupply();\\n        _checkpointUserBalance(user);\\n        _checkpointToken(token, false);\\n\\n        uint256 amount = _claimToken(user, token);\\n\\n        rewardFaucet.distributePastRewards(address(token));\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(\\n        address user,\\n        IERC20[] calldata tokens\\n    )\\n        external\\n        override\\n        nonReentrant\\n        optionalOnlyCaller(user)\\n        returns (uint256[] memory)\\n    {\\n        _checkpointTotalSupply();\\n        _checkpointUserBalance(user);\\n\\n        uint256 tokensLength = tokens.length;\\n        uint256[] memory amounts = new uint256[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; ++i) {\\n            require(allowedRewardTokens[address(tokens[i])], \\\"!allowed\\\");\\n            _checkpointToken(tokens[i], false);\\n            amounts[i] = _claimToken(user, tokens[i]);\\n            rewardFaucet.distributePastRewards(address(tokens[i]));\\n        }\\n\\n        return amounts;\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @dev It is required that both the global, token and user state have been properly checkpointed\\n     * before calling this function.\\n     */\\n    function _claimToken(\\n        address user,\\n        IERC20 token\\n    ) internal returns (uint256) {\\n        TokenState storage tokenState = _tokenState[token];\\n        uint256 nextUserTokenWeekToClaim = _getUserTokenTimeCursor(user, token);\\n\\n        // The first week which cannot be correctly claimed is the earliest of:\\n        // - A) The global or user time cursor (whichever is earliest), rounded up to the end of the week.\\n        // - B) The token time cursor, rounded down to the beginning of the week.\\n        //\\n        // This prevents the two failure modes:\\n        // - A) A user may claim a week for which we have not processed their balance, resulting in tokens being locked.\\n        // - B) A user may claim a week which then receives more tokens to be distributed. However the user has\\n        //      already claimed for that week so their share of these new tokens are lost.\\n        uint256 firstUnclaimableWeek = Math.min(\\n            _roundUpTimestamp(\\n                Math.min(_timeCursor, _userState[user].timeCursor)\\n            ),\\n            _roundDownTimestamp(tokenState.timeCursor)\\n        );\\n\\n        mapping(uint256 => uint256) storage tokensPerWeek = _tokensPerWeek[\\n            token\\n        ];\\n        mapping(uint256 => uint256)\\n            storage userBalanceAtTimestamp = _userBalanceAtTimestamp[user];\\n\\n        uint256 amount;\\n        for (uint256 i = 0; i < 20; ++i) {\\n            // We clearly cannot claim for `firstUnclaimableWeek` and so we break here.\\n            if (nextUserTokenWeekToClaim >= firstUnclaimableWeek) break;\\n            if (_veSupplyCache[nextUserTokenWeekToClaim] == 0) break;\\n\\n            amount +=\\n                (tokensPerWeek[nextUserTokenWeekToClaim] *\\n                    userBalanceAtTimestamp[nextUserTokenWeekToClaim]) /\\n                _veSupplyCache[nextUserTokenWeekToClaim];\\n            nextUserTokenWeekToClaim += 1 weeks;\\n        }\\n        // Update the stored user-token time cursor to prevent this user claiming this week again.\\n        _userTokenTimeCursor[user][token] = nextUserTokenWeekToClaim;\\n\\n        if (amount > 0) {\\n            // For a token to be claimable it must have been added to the cached balance so this is safe.\\n            tokenState.cachedBalance = uint128(\\n                tokenState.cachedBalance - amount\\n            );\\n            token.safeTransfer(user, amount);\\n            emit TokensClaimed(user, token, amount, nextUserTokenWeekToClaim);\\n        }\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Calculate the amount of `token` to be distributed to `_votingEscrow` holders since the last checkpoint.\\n     */\\n    function _checkpointToken(IERC20 token, bool force) internal {\\n        TokenState storage tokenState = _tokenState[token];\\n        uint256 lastTokenTime = tokenState.timeCursor;\\n        uint256 timeSinceLastCheckpoint;\\n        if (lastTokenTime == 0) {\\n            // If it's the first time we're checkpointing this token then start distributing from now.\\n            // Also mark at which timestamp users should start attempts to claim this token from.\\n            lastTokenTime = block.timestamp;\\n            tokenState.startTime = uint64(_roundDownTimestamp(block.timestamp));\\n\\n            // Prevent someone from assigning tokens to an inaccessible week.\\n            require(\\n                block.timestamp > _startTime,\\n                \\\"Reward distribution has not started yet\\\"\\n            );\\n        } else {\\n            timeSinceLastCheckpoint = block.timestamp - lastTokenTime;\\n\\n            if (!force) {\\n                // Checkpointing N times within a single week is completely equivalent to checkpointing once at the end.\\n                // We then want to get as close as possible to a single checkpoint every Wed 23:59 UTC to save gas.\\n\\n                // We then skip checkpointing if we're in the same week as the previous checkpoint.\\n                bool alreadyCheckpointedThisWeek = _roundDownTimestamp(\\n                    block.timestamp\\n                ) == _roundDownTimestamp(lastTokenTime);\\n                // However we want to ensure that all of this week's rewards are assigned to the current week without\\n                // overspilling into the next week. To mitigate this, we checkpoint if we're near the end of the week.\\n                bool nearingEndOfWeek = _roundUpTimestamp(block.timestamp) -\\n                    block.timestamp <\\n                    1 days;\\n\\n                // This ensures that we checkpoint once at the beginning of the week and again for each user interaction\\n                // towards the end of the week to give an accurate final reading of the balance.\\n                if (alreadyCheckpointedThisWeek && !nearingEndOfWeek) {\\n                    return;\\n                }\\n            }\\n        }\\n\\n        tokenState.timeCursor = uint64(block.timestamp);\\n\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        uint256 newTokensToDistribute = tokenBalance.sub(\\n            tokenState.cachedBalance\\n        );\\n        if (newTokensToDistribute == 0) return;\\n        require(\\n            tokenBalance <= type(uint128).max,\\n            \\\"Maximum token balance exceeded\\\"\\n        );\\n\\n        uint256 firstIncompleteWeek = _roundDownTimestamp(lastTokenTime);\\n        uint256 nextWeek = 0;\\n\\n        // Distribute `newTokensToDistribute` evenly across the time period from `lastTokenTime` to now.\\n        // These tokens are assigned to weeks proportionally to how much of this period falls into each week.\\n        mapping(uint256 => uint256) storage tokensPerWeek = _tokensPerWeek[\\n            token\\n        ];\\n\\n        uint256 amountToAdd;\\n        for (uint256 i = 0; i < 20; ++i) {\\n            // This is safe as we're incrementing a timestamp.\\n            nextWeek = firstIncompleteWeek + 1 weeks;\\n\\n            if (block.timestamp < nextWeek) {\\n                // `firstIncompleteWeek` is now the beginning of the current week, i.e. this is the final iteration.\\n                if (\\n                    timeSinceLastCheckpoint == 0 &&\\n                    block.timestamp == lastTokenTime\\n                ) {\\n                    amountToAdd = newTokensToDistribute;\\n                } else {\\n                    // block.timestamp >= lastTokenTime by definition.\\n                    amountToAdd = \\n                        (newTokensToDistribute *\\n                            (block.timestamp - lastTokenTime)) /\\n                        timeSinceLastCheckpoint;\\n                }\\n\\n                if (tokensPerWeek[firstIncompleteWeek].add(amountToAdd) <= type(uint128).max) {\\n                    tokensPerWeek[firstIncompleteWeek] += amountToAdd;\\n                    tokenState.cachedBalance += uint128(amountToAdd);\\n                }\\n                // As we've caught up to the present then we should now break.\\n                break;\\n            } else {\\n                // We've gone a full week or more without checkpointing so need to distribute tokens to previous weeks.\\n                if (timeSinceLastCheckpoint == 0 && nextWeek == lastTokenTime) {\\n                    // It shouldn't be possible to enter this block\\n                    amountToAdd = newTokensToDistribute;\\n                } else {\\n                    // nextWeek > lastTokenTime by definition.\\n                    amountToAdd = (newTokensToDistribute * (nextWeek - lastTokenTime)) /\\n                        timeSinceLastCheckpoint;\\n                }\\n            }\\n\\n            if (tokensPerWeek[firstIncompleteWeek].add(amountToAdd) <= type(uint128).max) {\\n                tokensPerWeek[firstIncompleteWeek] += amountToAdd;\\n                tokenState.cachedBalance += uint128(amountToAdd);\\n            }\\n\\n            // We've now \\\"checkpointed\\\" up to the beginning of next week so must update timestamps appropriately.\\n            lastTokenTime = nextWeek;\\n            firstIncompleteWeek = nextWeek;\\n        }\\n\\n        emit TokenCheckpointed(token, newTokensToDistribute, lastTokenTime);\\n    }\\n\\n    /**\\n     * @dev Cache the `user`'s balance of `_votingEscrow` at the beginning of each new week\\n     */\\n    function _checkpointUserBalance(address user) internal {\\n        uint256 maxUserEpoch = _votingEscrow.user_point_epoch(user);\\n\\n        // If user has no epochs then they have never locked veBPT.\\n        // They clearly will not then receive rewards.\\n        if (maxUserEpoch == 0) return;\\n\\n        UserState storage userState = _userState[user];\\n\\n        // `nextWeekToCheckpoint` represents the timestamp of the beginning of the first week\\n        // which we haven't checkpointed the user's VotingEscrow balance yet.\\n        uint256 nextWeekToCheckpoint = userState.timeCursor;\\n\\n        uint256 userEpoch;\\n        if (nextWeekToCheckpoint == 0) {\\n            // First checkpoint for user so need to do the initial binary search\\n            userEpoch = _findTimestampUserEpoch(\\n                user,\\n                _startTime,\\n                0,\\n                maxUserEpoch\\n            );\\n        } else {\\n            if (nextWeekToCheckpoint >= block.timestamp) {\\n                // User has checkpointed the current week already so perform early return.\\n                // This prevents a user from processing epochs created later in this week, however this is not an issue\\n                // as if a significant number of these builds up then the user will skip past them with a binary search.\\n                return;\\n            }\\n\\n            // Otherwise use the value saved from last time\\n            userEpoch = userState.lastEpochCheckpointed;\\n\\n            // This optimizes a scenario common for power users, which have frequent `VotingEscrow` interactions in\\n            // the same week. We assume that any such user is also claiming rewards every week, and so we only perform\\n            // a binary search here rather than integrating it into the main search algorithm, effectively skipping\\n            // most of the week's irrelevant checkpoints.\\n            // The slight tradeoff is that users who have multiple infrequent `VotingEscrow` interactions and also don't\\n            // claim frequently will also perform the binary search, despite it not leading to gas savings.\\n            if (maxUserEpoch - userEpoch > 20) {\\n                userEpoch = _findTimestampUserEpoch(\\n                    user,\\n                    nextWeekToCheckpoint,\\n                    userEpoch,\\n                    maxUserEpoch\\n                );\\n            }\\n        }\\n\\n        // Epoch 0 is always empty so bump onto the next one so that we start on a valid epoch.\\n        if (userEpoch == 0) {\\n            userEpoch = 1;\\n        }\\n\\n        IVotingEscrow.Point memory nextUserPoint = _votingEscrow\\n            .user_point_history(user, userEpoch);\\n\\n        // If this is the first checkpoint for the user, calculate the first week they're eligible for.\\n        // i.e. the timestamp of the first Thursday after they locked.\\n        // If this is earlier then the first distribution then fast forward to then.\\n        if (nextWeekToCheckpoint == 0) {\\n            // Disallow checkpointing before `startTime`.\\n            require(\\n                block.timestamp > _startTime,\\n                \\\"Reward distribution has not started yet\\\"\\n            );\\n            nextWeekToCheckpoint = Math.max(\\n                _startTime,\\n                _roundUpTimestamp(nextUserPoint.ts)\\n            );\\n            userState.startTime = uint64(nextWeekToCheckpoint);\\n        }\\n\\n        // It's safe to increment `userEpoch` and `nextWeekToCheckpoint` in this loop as epochs and timestamps\\n        // are always much smaller than 2^256 and are being incremented by small values.\\n        IVotingEscrow.Point memory currentUserPoint;\\n        for (uint256 i = 0; i < 50; ++i) {\\n            if (\\n                nextWeekToCheckpoint >= nextUserPoint.ts &&\\n                userEpoch <= maxUserEpoch\\n            ) {\\n                // The week being considered is contained in a user epoch after that described by `currentUserPoint`.\\n                // We then shift `nextUserPoint` into `currentUserPoint` and query the Point for the next user epoch.\\n                // We do this in order to step though epochs until we find the first epoch starting after\\n                // `nextWeekToCheckpoint`, making the previous epoch the one that contains `nextWeekToCheckpoint`.\\n                userEpoch += 1;\\n                currentUserPoint = nextUserPoint;\\n                if (userEpoch > maxUserEpoch) {\\n                    nextUserPoint = IVotingEscrow.Point(0, 0, 0, 0);\\n                } else {\\n                    nextUserPoint = _votingEscrow.user_point_history(\\n                        user,\\n                        userEpoch\\n                    );\\n                }\\n            } else {\\n                // The week being considered lies inside the user epoch described by `oldUserPoint`\\n                // we can then use it to calculate the user's balance at the beginning of the week.\\n                if (nextWeekToCheckpoint >= block.timestamp) {\\n                    // Break if we're trying to cache the user's balance at a timestamp in the future.\\n                    // We only perform this check here to ensure that we can still process checkpoints created\\n                    // in the current week.\\n                    break;\\n                }\\n\\n                int128 dt = int128(nextWeekToCheckpoint - currentUserPoint.ts);\\n                uint256 userBalance = currentUserPoint.bias >\\n                    currentUserPoint.slope * dt\\n                    ? uint256(\\n                        currentUserPoint.bias - currentUserPoint.slope * dt\\n                    )\\n                    : 0;\\n\\n                // User's lock has expired and they haven't relocked yet.\\n                if (userBalance == 0 && userEpoch > maxUserEpoch) {\\n                    nextWeekToCheckpoint = _roundUpTimestamp(block.timestamp);\\n                    break;\\n                }\\n\\n                // User had a nonzero lock and so is eligible to collect rewards.\\n                _userBalanceAtTimestamp[user][\\n                    nextWeekToCheckpoint\\n                ] = userBalance;\\n\\n                nextWeekToCheckpoint += 1 weeks;\\n            }\\n        }\\n\\n        // We subtract off 1 from the userEpoch to step back once so that on the next attempt to checkpoint\\n        // the current `currentUserPoint` will be loaded as `nextUserPoint`. This ensures that we can't skip over the\\n        // user epoch containing `nextWeekToCheckpoint`.\\n        // userEpoch > 0 so this is safe.\\n        userState.lastEpochCheckpointed = uint64(userEpoch - 1);\\n        userState.timeCursor = uint64(nextWeekToCheckpoint);\\n    }\\n\\n    /**\\n     * @dev Cache the totalSupply of VotingEscrow token at the beginning of each new week\\n     */\\n    function _checkpointTotalSupply() internal {\\n        uint256 nextWeekToCheckpoint = _timeCursor;\\n        uint256 weekStart = _roundDownTimestamp(block.timestamp);\\n\\n        // We expect `timeCursor == weekStart + 1 weeks` when fully up to date.\\n        if (nextWeekToCheckpoint > weekStart || weekStart == block.timestamp) {\\n            // We've already checkpointed up to this week so perform early return\\n            return;\\n        }\\n\\n        _votingEscrow.checkpoint();\\n\\n        // Step through the each week and cache the total supply at beginning of week on this contract\\n        for (uint256 i = 0; i < 20; ++i) {\\n            if (nextWeekToCheckpoint > weekStart) break;\\n\\n            _veSupplyCache[nextWeekToCheckpoint] = _votingEscrow.totalSupply(\\n                nextWeekToCheckpoint\\n            );\\n\\n            // This is safe as we're incrementing a timestamp\\n            nextWeekToCheckpoint += 1 weeks;\\n        }\\n        // Update state to the end of the current week (`weekStart` + 1 weeks)\\n        _timeCursor = nextWeekToCheckpoint;\\n    }\\n\\n    // Helper functions\\n\\n    /**\\n     * @dev Wrapper around `_userTokenTimeCursor` which returns the start timestamp for `token`\\n     * if `user` has not attempted to interact with it previously.\\n     */\\n    function _getUserTokenTimeCursor(\\n        address user,\\n        IERC20 token\\n    ) internal view returns (uint256) {\\n        uint256 userTimeCursor = _userTokenTimeCursor[user][token];\\n        if (userTimeCursor > 0) return userTimeCursor;\\n        // This is the first time that the user has interacted with this token.\\n        // We then start from the latest out of either when `user` first locked veBPT or `token` was first checkpointed.\\n        return\\n            Math.max(_userState[user].startTime, _tokenState[token].startTime);\\n    }\\n\\n    /**\\n     * @dev Return the user epoch number for `user` corresponding to the provided `timestamp`\\n     */\\n    function _findTimestampUserEpoch(\\n        address user,\\n        uint256 timestamp,\\n        uint256 minUserEpoch,\\n        uint256 maxUserEpoch\\n    ) internal view returns (uint256) {\\n        uint256 min = minUserEpoch;\\n        uint256 max = maxUserEpoch;\\n\\n        // Perform binary search through epochs to find epoch containing `timestamp`\\n        for (uint256 i = 0; i < 128; ++i) {\\n            if (min >= max) break;\\n\\n            // Algorithm assumes that inputs are less than 2^128 so this operation is safe.\\n            // +2 avoids getting stuck in min == mid < max\\n            uint256 mid = (min + max + 2) / 2;\\n            IVotingEscrow.Point memory pt = _votingEscrow\\n                .user_point_history(user, mid);\\n            if (pt.ts <= timestamp) {\\n                min = mid;\\n            } else {\\n                // max > min so this is safe.\\n                max = mid - 1;\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /**\\n     * @dev Rounds the provided timestamp down to the beginning of the previous week (Thurs 00:00 UTC)\\n     */\\n    function _roundDownTimestamp(\\n        uint256 timestamp\\n    ) private pure returns (uint256) {\\n        // Division by zero or overflows are impossible here.\\n        return (timestamp / 1 weeks) * 1 weeks;\\n    }\\n\\n    /**\\n     * @dev Rounds the provided timestamp up to the beginning of the next week (Thurs 00:00 UTC)\\n     */\\n    function _roundUpTimestamp(\\n        uint256 timestamp\\n    ) private pure returns (uint256) {\\n        // Overflows are impossible here for all realistic inputs.\\n        return _roundDownTimestamp(timestamp + 1 weeks - 1);\\n    }\\n\\n    /**\\n     * @notice Adds allowed tokens for the distribution.\\n     * @param tokens - An array of ERC20 token addresses to be added for the further reward distribution.\\n     */\\n    function addAllowedRewardTokens(address[] calldata tokens) external onlyAdmin {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(!allowedRewardTokens[tokens[i]], \\\"already exist\\\");\\n            allowedRewardTokens[tokens[i]] = true;\\n            _rewardTokens.push(tokens[i]);\\n            emit TokenAdded(tokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns allowed for reward distribution tokens list.\\n     * @return An array of ERC20 token addresses which can be used as rewards.\\n     */\\n    function getAllowedRewardTokens() external view returns (address[] memory) {\\n        return _rewardTokens;\\n    }\\n\\n    /**\\n     * @notice Transfers admin rights to new address.\\n     * @param newAdmin - The new admin address to set.\\n     */\\n    function transferAdmin(address newAdmin) external onlyAdmin {\\n        require (newAdmin != address(0), \\\"zero address\\\");\\n        admin = newAdmin;\\n        emit NewAdmin(newAdmin);\\n    }\\n\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IVotingEscrow {\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // - dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function epoch() external view returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function future_admin() external view returns (address);\\n\\n    function apply_smart_wallet_checker() external;\\n\\n    function apply_transfer_ownership() external;\\n\\n    // function balanceOf(address addr, uint256 _t) external view returns (uint256);\\n    function balanceOf(\\n        address user,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    function balanceOfAt(\\n        address addr,\\n        uint256 _block\\n    ) external view returns (uint256);\\n\\n    function checkpoint() external;\\n\\n    function commit_smart_wallet_checker(address addr) external;\\n\\n    function commit_transfer_ownership(address addr) external;\\n\\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\\n\\n    function decimals() external view returns (uint256);\\n\\n    function deposit_for(address _addr, uint256 _value) external;\\n\\n    function get_last_user_slope(address addr) external view returns (int128);\\n\\n    function increase_amount(uint256 _value) external;\\n\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n\\n    function locked__end(address _addr) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function point_history(\\n        uint256 timestamp\\n    ) external view returns (Point memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function token() external view returns (address);\\n\\n    function totalSupply(uint256 t) external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\\n\\n    function user_point_epoch(address user) external view returns (uint256);\\n\\n    function user_point_history__ts(\\n        address _addr,\\n        uint256 _idx\\n    ) external view returns (uint256);\\n\\n    function user_point_history(\\n        address user,\\n        uint256 timestamp\\n    ) external view returns (Point memory);\\n\\n    function withdraw() external;\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"contracts/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVotingEscrow.sol\\\";\\n\\n/**\\n * @title Reward Distributor\\n * @notice Distributes any tokens transferred to the contract (e.g. Protocol rewards and any token emissions) among veBPT\\n * holders proportionally based on a snapshot of the week at which the tokens are sent to the RewardDistributor contract.\\n * @dev Supports distributing arbitrarily many different tokens. In order to start distributing a new token to veBPT\\n * holders simply transfer the tokens to the `RewardDistributor` contract and then call `checkpointToken`.\\n */\\ninterface IRewardDistributor {\\n    event TokenCheckpointed(\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 lastCheckpointTimestamp\\n    );\\n    event TokensClaimed(\\n        address user,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 userTokenTimeCursor\\n    );\\n    event TokenAdded(address indexed token);\\n    event RewardDeposit(IERC20 token, uint256 amount);\\n    event NewAdmin(address indexed newAdmin);\\n\\n    /**\\n     * @notice Returns the VotingEscrow (veBPT) token contract\\n     */\\n    function getVotingEscrow() external view returns (IVotingEscrow);\\n\\n    /**\\n     * @notice Returns the global time cursor representing the most earliest uncheckpointed week.\\n     */\\n    function getTimeCursor() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.\\n     * @param user - The address of the user to query.\\n     */\\n    function getUserTimeCursor(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getTokenTimeCursor(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.\\n     * @param user - The address of the user to query.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getUserTokenTimeCursor(\\n        address user,\\n        IERC20 token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user's cached balance of veBPT as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.\\n     * @param user - The address of the user of which to read the cached balance of.\\n     * @param timestamp - The timestamp at which to read the `user`'s cached balance at.\\n     */\\n    function getUserBalanceAtTimestamp(\\n        address user,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the cached total supply of veBPT as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.\\n     * @param timestamp - The timestamp at which to read the cached total supply at.\\n     */\\n    function getTotalSupplyAtTimestamp(\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the RewardDistributor's cached balance of `token`.\\n     */\\n    function getTokenLastBalance(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of `token` which the RewardDistributor received in the week beginning at `timestamp`.\\n     * @param token - The ERC20 token address to query.\\n     * @param timestamp - The timestamp corresponding to the beginning of the week of interest.\\n     */\\n    function getTokensDistributedInWeek(\\n        IERC20 token,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    // Depositing\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev Sending tokens directly to the RewardDistributor instead of using `depositTokens` may result in tokens being\\n     * retroactively distributed to past weeks, or for the distribution to carry over to future weeks.\\n     *\\n     * If for some reason `depositTokens` cannot be called, in order to ensure that all tokens are correctly distributed\\n     * manually call `checkpointToken` before and after the token transfer.\\n     * @param token - The ERC20 token address to distribute.\\n     * @param amount - The amount of tokens to deposit.\\n     */\\n    function depositToken(IERC20 token, uint256 amount) external;\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev A version of `depositToken` which supports depositing multiple `tokens` at once.\\n     * See `depositToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to distribute.\\n     * @param amounts - An array of token amounts to deposit.\\n     */\\n    function depositTokens(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    // Checkpointing\\n\\n    /**\\n     * @notice Caches the total supply of veBPT at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     */\\n    function checkpoint() external;\\n\\n    /**\\n     * @notice Caches the user's balance of veBPT at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param user - The address of the user to be checkpointed.\\n     */\\n    function checkpointUser(address user) external;\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the RewardDistributor to weekly distributions.\\n     * @dev Any `token` balance held by the RewardDistributor above that which is returned by `getTokenLastBalance`\\n     * will be distributed evenly across the time period since `token` was last checkpointed.\\n     *\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param token - The ERC20 token address to be checkpointed.\\n     */\\n    function checkpointToken(IERC20 token) external;\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the RewardDistributor to weekly distributions.\\n     * @dev A version of `checkpointToken` which supports checkpointing multiple tokens.\\n     * See `checkpointToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to be checkpointed.\\n     */\\n    function checkpointTokens(IERC20[] calldata tokens) external;\\n\\n    // Claiming\\n\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the RewardDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(\\n        address user,\\n        IERC20[] calldata tokens\\n    ) external returns (uint256[] memory);\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"contracts/interfaces/IRewardFaucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IRewardFaucet {\\n\\n    function distributePastRewards(address rewardToken) external;\\n\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(\\n    bool condition,\\n    uint256 errorCode,\\n    bytes3 prefix\\n) pure {\\n    if (!condition) _revert(errorCode, prefix);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    _revert(errorCode, 0x42414c); // This is the raw byte representation of \\\"BAL\\\"\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode, bytes3 prefix) pure {\\n    uint256 prefixUint = uint256(uint24(prefix));\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string.\\n        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')\\n        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))\\n\\n        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n    uint256 internal constant INSUFFICIENT_DATA = 105;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n    uint256 internal constant DISABLED = 211;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;\\n    uint256 internal constant FEATURE_DISABLED = 344;\\n    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;\\n    uint256 internal constant SET_SWAP_FEE_DURING_FEE_CHANGE = 346;\\n    uint256 internal constant SET_SWAP_FEE_PENDING_FEE_CHANGE = 347;\\n    uint256 internal constant CHANGE_TOKENS_DURING_WEIGHT_CHANGE = 348;\\n    uint256 internal constant CHANGE_TOKENS_PENDING_WEIGHT_CHANGE = 349;\\n    uint256 internal constant MAX_WEIGHT = 350;\\n    uint256 internal constant UNAUTHORIZED_JOIN = 351;\\n    uint256 internal constant MAX_MANAGEMENT_AUM_FEE_PERCENTAGE = 352;\\n    uint256 internal constant FRACTIONAL_TARGET = 353;\\n    uint256 internal constant ADD_OR_REMOVE_BPT = 354;\\n    uint256 internal constant INVALID_CIRCUIT_BREAKER_BOUNDS = 355;\\n    uint256 internal constant CIRCUIT_BREAKER_TRIPPED = 356;\\n    uint256 internal constant MALICIOUS_QUERY_REVERT = 357;\\n    uint256 internal constant JOINS_EXITS_DISABLED = 358;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;\\n    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;\\n    uint256 internal constant INVALID_OPERATION = 435;\\n    uint256 internal constant CODEC_OVERFLOW = 436;\\n    uint256 internal constant IN_RECOVERY_MODE = 437;\\n    uint256 internal constant NOT_IN_RECOVERY_MODE = 438;\\n    uint256 internal constant INDUCED_FAILURE = 439;\\n    uint256 internal constant EXPIRED_SIGNATURE = 440;\\n    uint256 internal constant MALFORMED_SIGNATURE = 441;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_UINT64 = 442;\\n    uint256 internal constant UNHANDLED_FEE_TYPE = 443;\\n    uint256 internal constant BURN_FROM_ZERO = 444;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n    uint256 internal constant AUM_FEE_PERCENTAGE_TOO_HIGH = 603;\\n\\n    // FeeSplitter\\n    uint256 internal constant SPLITTER_FEE_PERCENTAGE_TOO_HIGH = 700;\\n\\n    // Misc\\n    uint256 internal constant UNIMPLEMENTED = 998;\\n    uint256 internal constant SHOULD_NOT_HAPPEN = 999;\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the Address library from OpenZeppelin Contracts, altered by removing the `isContract` checks on\\n// `functionCall` and `functionDelegateCall` in order to save gas, as the recipients are known to be contracts.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    // solhint-disable max-line-length\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        _require(address(this).balance >= amount, Errors.ADDRESS_INSUFFICIENT_BALANCE);\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        _require(success, Errors.ADDRESS_CANNOT_SEND_VALUE);\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata);\\n    }\\n\\n    // solhint-enable max-line-length\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but passing some native ETH as msg.value to the call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling up the\\n     * revert reason or using the one provided.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                _revert(Errors.LOW_LEVEL_CALL_FAILED);\\n            }\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    // solc-ignore-next-line func-mutability\\n    function _getChainId() private view returns (uint256 chainId) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\\\";\\n\\nimport \\\"../openzeppelin/EIP712.sol\\\";\\n\\n/**\\n * @dev Utility for signing Solidity function calls.\\n */\\nabstract contract EOASignaturesValidator is ISignaturesValidator, EIP712 {\\n    // Replay attack prevention for each account.\\n    mapping(address => uint256) internal _nextNonce;\\n\\n    function getDomainSeparator() public view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function getNextNonce(address account) public view override returns (uint256) {\\n        return _nextNonce[account];\\n    }\\n\\n    function _ensureValidSignature(\\n        address account,\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 errorCode\\n    ) internal {\\n        return _ensureValidSignature(account, structHash, signature, type(uint256).max, errorCode);\\n    }\\n\\n    function _ensureValidSignature(\\n        address account,\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 deadline,\\n        uint256 errorCode\\n    ) internal {\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        _require(_isValidSignature(account, digest, signature), errorCode);\\n\\n        // We could check for the deadline before validating the signature, but this leads to saner error processing (as\\n        // we only care about expired deadlines if the signature is correct) and only affects the gas cost of the revert\\n        // scenario, which will only occur infrequently, if ever.\\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\\n        // solhint-disable-next-line not-rely-on-time\\n        _require(deadline >= block.timestamp, Errors.EXPIRED_SIGNATURE);\\n\\n        // We only advance the nonce after validating the signature. This is irrelevant for this module, but it can be\\n        // important in derived contracts that override _isValidSignature (e.g. SignaturesValidator), as we want for\\n        // the observable state to still have the current nonce as the next valid one.\\n        _nextNonce[account] += 1;\\n    }\\n\\n    function _isValidSignature(\\n        address account,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view virtual returns (bool) {\\n        _require(signature.length == 65, Errors.MALFORMED_SIGNATURE);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the r, s and v signature parameters, and the only way to get them is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n        // ecrecover returns the zero address on recover failure, so we need to handle that explicitly.\\n        return (recoveredAddress != address(0) && recoveredAddress == account);\\n    }\\n\\n    function _toArraySignature(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (bytes memory) {\\n        bytes memory signature = new bytes(65);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(add(signature, 32), r)\\n            mstore(add(signature, 64), s)\\n            mstore8(add(signature, 96), v)\\n        }\\n\\n        return signature;\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/SignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol\\\";\\n\\nimport \\\"./EOASignaturesValidator.sol\\\";\\nimport \\\"../openzeppelin/Address.sol\\\";\\n\\n/**\\n * @dev Utility for signing Solidity function calls.\\n */\\nabstract contract SignaturesValidator is EOASignaturesValidator {\\n    using Address for address;\\n\\n    function _isValidSignature(\\n        address account,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view virtual override returns (bool) {\\n        if (account.isContract()) {\\n            return IERC1271(account).isValidSignature(digest, signature) == IERC1271.isValidSignature.selector;\\n        } else {\\n            return super._isValidSignature(account, digest, signature);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the OptionalOnlyCaller helper, used to opt in to a caller\\n * verification for a given address to methods that are otherwise callable by any address.\\n */\\ninterface IOptionalOnlyCaller {\\n    /**\\n     * @dev Emitted every time setOnlyCallerCheck is called.\\n     */\\n    event OnlyCallerOptIn(address user, bool enabled);\\n\\n    /**\\n     * @dev Enables / disables verification mechanism for caller.\\n     * @param enabled - True if caller verification shall be enabled, false otherwise.\\n     */\\n    function setOnlyCallerCheck(bool enabled) external;\\n\\n    function setOnlyCallerCheckWithSignature(\\n        address user,\\n        bool enabled,\\n        bytes memory signature\\n    ) external;\\n\\n    /**\\n     * @dev Returns true if caller verification is enabled for the given user, false otherwise.\\n     */\\n    function isOnlyCallerEnabled(address user) external view returns (bool);\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/OptionalOnlyCaller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./SignaturesValidator.sol\\\";\\n\\nabstract contract OptionalOnlyCaller is IOptionalOnlyCaller, SignaturesValidator {\\n    mapping(address => bool) private _isOnlyCallerEnabled;\\n\\n    bytes32 private constant _SET_ONLY_CALLER_CHECK_TYPEHASH = keccak256(\\n        \\\"SetOnlyCallerCheck(address user,bool enabled,uint256 nonce)\\\"\\n    );\\n\\n    /**\\n     * @dev Reverts if the verification mechanism is enabled and the given address is not the caller.\\n     * @param user - Address to validate as the only allowed caller, if the verification is enabled.\\n     */\\n    modifier optionalOnlyCaller(address user) {\\n        _verifyCaller(user);\\n        _;\\n    }\\n\\n    function setOnlyCallerCheck(bool enabled) external override {\\n        _setOnlyCallerCheck(msg.sender, enabled);\\n    }\\n\\n    function setOnlyCallerCheckWithSignature(\\n        address user,\\n        bool enabled,\\n        bytes memory signature\\n    ) external override {\\n        bytes32 structHash = keccak256(abi.encode(_SET_ONLY_CALLER_CHECK_TYPEHASH, user, enabled, getNextNonce(user)));\\n        _ensureValidSignature(user, structHash, signature, Errors.INVALID_SIGNATURE);\\n        _setOnlyCallerCheck(user, enabled);\\n    }\\n\\n    function _setOnlyCallerCheck(address user, bool enabled) private {\\n        _isOnlyCallerEnabled[user] = enabled;\\n        emit OnlyCallerOptIn(user, enabled);\\n    }\\n\\n    function isOnlyCallerEnabled(address user) external view override returns (bool) {\\n        return _isOnlyCallerEnabled[user];\\n    }\\n\\n    function _verifyCaller(address user) private view {\\n        if (_isOnlyCallerEnabled[user]) {\\n            _require(msg.sender == user, Errors.SENDER_NOT_ALLOWED);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _enterNonReentrant();\\n        _;\\n        _exitNonReentrant();\\n    }\\n\\n    function _enterNonReentrant() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        _require(_status != _ENTERED, Errors.REENTRANCY);\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _exitNonReentrant() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        _require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // Some contracts need their allowance reduced to 0 before setting it to an arbitrary amount.\\n        if (value != 0 && token.allowance(address(this), address(to)) != 0) {\\n            _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, to, 0));\\n        }\\n\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, to, value));\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"},\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library.\\n */\\nlibrary Math {\\n    // solhint-disable no-inline-assembly\\n\\n    /**\\n     * @dev Returns the absolute value of a signed integer.\\n     */\\n    function abs(int256 a) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = a > 0 ? uint256(a) : uint256(-a)\\n        assembly {\\n            let s := sar(255, a)\\n            result := sub(xor(a, s), s)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = (a < b) ? b : a;\\n        assembly {\\n            result := sub(a, mul(sub(a, b), lt(a, b)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        // Equivalent to `result = (a < b) ? a : b`\\n        assembly {\\n            result := sub(a, mul(sub(a, b), gt(a, b)))\\n        }\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\\n        return c;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        // Equivalent to:\\n        // result = a == 0 ? 0 : 1 + (a - 1) / b;\\n        assembly {\\n            result := mul(iszero(iszero(a)), add(1, div(sub(a, 1), b)))\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"}}}","address":"0xAD14D0240C90A2A8E140496EE7A02499387C57C2","bytecode":"0x60e060405234801561001057600080fd5b5060408051808201825260118152702932bbb0b9322234b9ba3934b13aba37b960791b602080830191825283518085019094526001808552603160f81b9185019182529251909120608052915190912060a0527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60c05260025560805160a05160c051612b476100b660003980611d9e525080611de0525080611dbf5250612b476000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806390193b7c1161010f578063de681faf116100a2578063ed3a088711610071578063ed3a0887146103ea578063f213bd8c146103fd578063f851a44014610410578063fcaa54ee14610418576101e5565b8063de681faf146103a7578063e811f44b146103ba578063ece7514d146103cd578063ed24911d146103e2576101e5565b8063be203094116100de578063be20309414610366578063c2c4c5c114610379578063ca31879d14610381578063d3dc4ca114610394576101e5565b806390193b7c1461031a578063905d10ac1461032d578063a1648aa514610340578063acbc142814610353576101e5565b80634c9a47d8116101875780638050a7ee116101565780638050a7ee146102cc57806382aa5ad4146102df578063876e69a1146102e757806388720467146102fa576101e5565b80634c9a47d8146102805780634f3c50901461029357806375829def146102a65780637b8d6221146102b9576101e5565b8063338b5dea116101c3578063338b5dea1461023d5780633902b9bc14610250578063392e53cd14610263578063397bcd4114610278576101e5565b806308b0308a146101ea57806314866e08146102085780632308805b1461021d575b600080fd5b6101f261042b565b6040516101ff91906127b8565b60405180910390f35b61021b61021636600461248e565b61043f565b005b61023061022b36600461248e565b61045b565b6040516101ff9190612892565b61021b61024b3660046125e0565b61048a565b61021b61025e36600461248e565b610543565b61026b61058e565b6040516101ff9190612887565b6101f2610597565b61021b61028e3660046125e0565b6105a6565b6102306102a1366004612788565b610633565b61021b6102b436600461248e565b610645565b61021b6102c736600461264a565b6106df565b6102306102da3660046125a8565b61087e565b610230610893565b6102306102f536600461248e565b610899565b61030d6103083660046124aa565b6108c4565b6040516101ff919061284f565b61023061032836600461248e565b610a87565b61021b61033b36600461260b565b610aa2565b61026b61034e36600461248e565b610b35565b61023061036136600461248e565b610b53565b61021b6103743660046126cc565b610b7e565b61021b610d45565b61023061038f3660046125a8565b610d5f565b6102306103a23660046125e0565b610e41565b6102306103b53660046125e0565b610e69565b61021b6103c83660046126b2565b610e91565b6103d5610e9b565b6040516101ff919061280e565b610230610efd565b61026b6103f836600461248e565b610f0c565b61021b61040b36600461260b565b610f21565b6101f26110bc565b61021b6104263660046124fc565b6110cb565b60035461010090046001600160a01b031690565b610447611159565b61045081611170565b610458611566565b50565b6001600160a01b0381166000908152600b6020526040902054600160801b90046001600160801b03165b919050565b610492611159565b6001600160a01b0382166000908152600a602052604090205460ff166104d35760405162461bcd60e51b81526004016104ca906128e3565b60405180910390fd5b6104de82600061156d565b6104f36001600160a01b0383163330846118e8565b6104fe82600161156d565b7f95bf5847357310d24f8d03d8bad76c8ee329dfd3a3cb200df21c7bd1619e93bd828260405161052f9291906127f5565b60405180910390a161053f611566565b5050565b61054b611159565b6001600160a01b0381166000908152600a602052604090205460ff166105835760405162461bcd60e51b81526004016104ca906128e3565b61045081600161156d565b60035460ff1681565b6004546001600160a01b031681565b6001600160a01b0382166000908152600a602052604090205460ff166105de5760405162461bcd60e51b81526004016104ca906128e3565b6004546001600160a01b031633146106085760405162461bcd60e51b81526004016104ca9061297b565b61061382600061156d565b6106286001600160a01b0383163330846118e8565b61053f82600161156d565b60009081526007602052604090205490565b6008546001600160a01b0316331461066f5760405162461bcd60e51b81526004016104ca90612ab6565b6001600160a01b0381166106955760405162461bcd60e51b81526004016104ca90612a1c565b600880546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b6106e7611159565b6106f18382611942565b8260005b8181101561086e57600a600087878481811061070d57fe5b9050602002016020810190610722919061248e565b6001600160a01b0316815260208101919091526040016000205460ff1661075b5760405162461bcd60e51b81526004016104ca906128e3565b61078686868381811061076a57fe5b905060200201602081019061077f919061248e565b600061156d565b6107d0333086868581811061079757fe5b905060200201358989868181106107aa57fe5b90506020020160208101906107bf919061248e565b6001600160a01b03169291906118e8565b6107fb8686838181106107df57fe5b90506020020160208101906107f4919061248e565b600161156d565b7f95bf5847357310d24f8d03d8bad76c8ee329dfd3a3cb200df21c7bd1619e93bd86868381811061082857fe5b905060200201602081019061083d919061248e565b85858481811061084957fe5b9050602002013560405161085e9291906127f5565b60405180910390a16001016106f5565b5050610878611566565b50505050565b600061088a838361194f565b90505b92915050565b60065490565b6001600160a01b03166000908152600d6020526040902054600160401b90046001600160401b031690565b60606108ce611159565b836108d8816119cc565b6108e0611a04565b6108e985611170565b826000816001600160401b038111801561090257600080fd5b5060405190808252806020026020018201604052801561092c578160200160208202803683370190505b50905060005b82811015610a7357600a600088888481811061094a57fe5b905060200201602081019061095f919061248e565b6001600160a01b0316815260208101919091526040016000205460ff166109985760405162461bcd60e51b81526004016104ca906128e3565b6109a787878381811061076a57fe5b6109d1888888848181106109b757fe5b90506020020160208101906109cc919061248e565b611b58565b8282815181106109dd57fe5b60209081029190910101526004546001600160a01b031663c7b56abe888884818110610a0557fe5b9050602002016020810190610a1a919061248e565b6040518263ffffffff1660e01b8152600401610a3691906127b8565b600060405180830381600087803b158015610a5057600080fd5b505af1158015610a64573d6000803e3d6000fd5b50505050806001019050610932565b5092505050610a80611566565b9392505050565b6001600160a01b031660009081526020819052604090205490565b610aaa611159565b8060005b81811015610b2b57600a6000858584818110610ac657fe5b9050602002016020810190610adb919061248e565b6001600160a01b0316815260208101919091526040016000205460ff16610b145760405162461bcd60e51b81526004016104ca906128e3565b610b238484838181106107df57fe5b600101610aae565b505061053f611566565b6001600160a01b031660009081526001602052604090205460ff1690565b6001600160a01b03166000908152600b6020526040902054600160401b90046001600160401b031690565b60035460ff1615610ba15760405162461bcd60e51b81526004016104ca9061293c565b6003805460ff191660011790556001600160a01b03811615801590610bce57506001600160a01b03831615155b610bea5760405162461bcd60e51b81526004016104ca9061295c565b600880546001600160a01b038084166001600160a01b0319928316179092556004805486841692169190911790556003805491861661010002610100600160a81b0319909216919091179055610c3f82611d2a565b91506000610c4c42611d2a565b905080831015610c6e5760405162461bcd60e51b81526004016104ca906129e7565b80625c490001831115610c935760405162461bcd60e51b81526004016104ca90612a42565b80831415610d375760405163bd85b03960e01b81526000906001600160a01b0387169063bd85b03990610cca908590600401612892565b60206040518083038186803b158015610ce257600080fd5b505afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a91906127a0565b11610d375760405162461bcd60e51b81526004016104ca90612a6e565b505060058190556006555050565b610d4d611159565b610d55611a04565b610d5d611566565b565b6000610d69611159565b82610d73816119cc565b6001600160a01b0383166000908152600a602052604090205460ff16610dab5760405162461bcd60e51b81526004016104ca906128e3565b610db3611a04565b610dbc84611170565b610dc783600061156d565b6000610dd38585611b58565b600480546040516363dab55f60e11b81529293506001600160a01b03169163c7b56abe91610e03918891016127b8565b600060405180830381600087803b158015610e1d57600080fd5b505af1158015610e31573d6000803e3d6000fd5b509294505050505061088d611566565b6001600160a01b03919091166000908152600c60209081526040808320938352929052205490565b6001600160a01b03919091166000908152600e60209081526040808320938352929052205490565b6104583382611d36565b60606009805480602002602001604051908101604052809291908181526020018280548015610ef357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ed5575b5050505050905090565b6000610f07611d9a565b905090565b600a6020526000908152604090205460ff1681565b6008546001600160a01b03163314610f4b5760405162461bcd60e51b81526004016104ca90612ab6565b60005b818110156110b757600a6000848484818110610f6657fe5b9050602002016020810190610f7b919061248e565b6001600160a01b0316815260208101919091526040016000205460ff1615610fb55760405162461bcd60e51b81526004016104ca906128bc565b6001600a6000858585818110610fc757fe5b9050602002016020810190610fdc919061248e565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600983838381811061101257fe5b9050602002016020810190611027919061248e565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905582828281811061106557fe5b905060200201602081019061107a919061248e565b6001600160a01b03167f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a460405160405180910390a2600101610f4e565b505050565b6008546001600160a01b031681565b60007fbd291ffccec065968fe20c5f8debdad73ab50837733f357eeae8814178015a9084846110f987610a87565b60405160200180858152602001846001600160a01b03168152602001831515815260200182815260200194505050505060405160208183030381529060405280519060200120905061114f8482846101f8611e58565b6108788484611d36565b61116a600280541415610190611e67565b60028055565b60035460405163010ae75760e01b815260009161010090046001600160a01b03169063010ae757906111a69085906004016127b8565b60206040518083038186803b1580156111be57600080fd5b505afa1580156111d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f691906127a0565b9050806112035750610458565b6001600160a01b0382166000908152600d6020526040812080549091600160401b9091046001600160401b0316908161124c5761124585600554600087611e75565b9050611289565b42821061125c5750505050610458565b508154600160801b90046001600160801b0316601481850311156112895761128685838387611e75565b90505b80611292575060015b6003546040516328d09d4760e01b815260009161010090046001600160a01b0316906328d09d47906112ca90899086906004016127f5565b60806040518083038186803b1580156112e257600080fd5b505afa1580156112f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131a919061271e565b9050826113775760055442116113425760405162461bcd60e51b81526004016104ca906129a0565b61135a6005546113558360400151611f54565b611f64565b845467ffffffffffffffff19166001600160401b03821617855592505b61137f6123f6565b60005b6032811015611519578260400151851015801561139f5750868411155b1561147557600184019350829150868411156113e75760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611470565b6003546040516328d09d4760e01b81526101009091046001600160a01b0316906328d09d479061141d908b9088906004016127f5565b60806040518083038186803b15801561143557600080fd5b505afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d919061271e565b92505b611511565b42851061148157611519565b6000826040015186039050600081846020015102600f0b8460000151600f0b136114ac5760006114bd565b81846020015102846000015103600f0b5b9050801580156114cc57508886115b156114e3576114da42611f54565b96505050611519565b6001600160a01b038a166000908152600e602090815260408083208a84529091529020555062093a80909401935b600101611382565b505083546001600160801b0316600019929092016001600160401b03908116600160801b029290921767ffffffffffffffff60401b1916600160401b939092169290920217909155505050565b6001600255565b6001600160a01b0382166000908152600b6020526040812080549091600160401b9091046001600160401b031690816115ee574291506115ac42611d2a565b835467ffffffffffffffff19166001600160401b039190911617835560055442116115e95760405162461bcd60e51b81526004016104ca906129a0565b611640565b81420390508361164057600061160383611d2a565b61160c42611d2a565b1490506000620151804261161f42611f54565b0310905081801561162e575080155b1561163d57505050505061053f565b50505b825467ffffffffffffffff60401b1916600160401b426001600160401b0316021783556040516370a0823160e01b81526000906001600160a01b038716906370a08231906116929030906004016127b8565b60206040518083038186803b1580156116aa57600080fd5b505afa1580156116be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e291906127a0565b8454909150600090611705908390600160801b90046001600160801b0316611f70565b90508061171657505050505061053f565b6001600160801b0382111561173d5760405162461bcd60e51b81526004016104ca90612905565b600061174885611d2a565b6001600160a01b0389166000908152600c602052604081209192509081805b601481101561189f578462093a800193508342101561180a578715801561178d57508842145b1561179a578591506117ab565b878942038702816117a757fe5b0491505b6000858152602084905260409020546001600160801b03906117cd9084611f7e565b1161180557600085815260208490526040902080548301905589546001600160801b03600160801b808304821685018216029116178a555b61189f565b8715801561181757508884145b1561182457859150611835565b8789850387028161183157fe5b0491505b6000858152602084905260409020546001600160801b03906118579084611f7e565b1161188f57600085815260208490526040902080548301905589546001600160801b03600160801b808304821685018216029116178a555b9297508793508392600101611767565b507f9b7f1a85a4c9b4e59e1b6527d9969c50cdfb3a1a467d0c4a51fb0ed8bf07f1308b868a6040516118d39392919061289b565b60405180910390a15050505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610878908590611f90565b61053f8183146067611e67565b6001600160a01b038083166000908152600f60209081526040808320938516835292905290812054801561198457905061088d565b6001600160a01b038085166000908152600d60209081526040808320549387168352600b9091529020546119c4916001600160401b039081169116611f64565b949350505050565b6001600160a01b03811660009081526001602052604090205460ff161561045857610458336001600160a01b03831614610191611e67565b6006546000611a1242611d2a565b905080821180611a2157504281145b15611a2d575050610d5d565b600360019054906101000a90046001600160a01b03166001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a7d57600080fd5b505af1158015611a91573d6000803e3d6000fd5b5050505060005b6014811015611b515781831115611aae57611b51565b60035460405163bd85b03960e01b81526101009091046001600160a01b03169063bd85b03990611ae2908690600401612892565b60206040518083038186803b158015611afa57600080fd5b505afa158015611b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3291906127a0565b60008481526007602052604090205562093a8090920191600101611a98565b5050600655565b6001600160a01b0381166000908152600b6020526040812081611b7b858561194f565b6006546001600160a01b0387166000908152600d602052604081205492935091611be291611bc291611bbd9190600160401b90046001600160401b031661207a565b611f54565b8454611bdd90600160401b90046001600160401b0316611d2a565b61207a565b6001600160a01b038087166000908152600c60209081526040808320938b168352600e9091528120929350909190805b6014811015611c7e57848610611c2757611c7e565b600086815260076020526040902054611c3f57611c7e565b60008681526007602090815260408083205486835281842054928890529220540281611c6757fe5b62093a809790970196049190910190600101611c12565b506001600160a01b03808a166000908152600f60209081526040808320938c168352929052208590558015611d1e5785546001600160801b03600160801b80830482168490038216029116178655611ce06001600160a01b0389168a83612086565b7fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de689898388604051611d1594939291906127cc565b60405180910390a15b98975050505050505050565b62093a80908190040290565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915582519384529083015280517fac9874a7a931a3f5c9f202c6d9cf40de5d21506993c9f9c38ca8265add89584c9281900390910190a15050565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611e076120d8565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b610878848484600019856120dc565b8161053f5761053f81612133565b60008282825b6080811015611f4857818310611e9057611f48565b6003546040516328d09d4760e01b81526002858501810104916000916101009091046001600160a01b0316906328d09d4790611ed2908d9086906004016127f5565b60806040518083038186803b158015611eea57600080fd5b505afa158015611efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f22919061271e565b905088816040015111611f3757819450611f3e565b6001820393505b5050600101611e7b565b50909695505050505050565b600061088d62093a7f8301611d2a565b80820390821002900390565b600061088a83836001612143565b600082820161088a8482101583611e67565b600080836001600160a01b0316836040518082805190602001908083835b60208310611fcd5780518252601f199092019160209182019101611fae565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461202f576040519150601f19603f3d011682016040523d82523d6000602084013e612034565b606091505b5091509150600082141561204c573d6000803e3d6000fd5b610878815160001480612072575081806020019051602081101561206f57600080fd5b50515b6101a2611e67565b80820390821102900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526110b7908490611f90565b4690565b60006120e785612159565b90506120fd6120f78783876121a5565b83611e67565b61210c428410156101b8611e67565b5050506001600160a01b039092166000908152602081905260409020805460010190555050565b610458816210905360ea1b6122c3565b60006121528484111583611e67565b5050900390565b6000612163611d9a565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b60006121b9846001600160a01b0316612324565b156122b15760408051630b135d3f60e11b808252600482018681526024830193845285516044840152855191936001600160a01b03891693631626ba7e938993899390929091606490910190602085019080838360005b83811015612228578181015183820152602001612210565b50505050905090810190601f1680156122555780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d602081101561229d57600080fd5b50516001600160e01b031916149050610a80565b6122bc84848461232a565b9050610a80565b62461bcd60e51b600090815260206004526007602452600a808404818106603090810160081b958390069590950190829004918206850160101b01602363ffffff0060e086901c160160181b0190930160c81b60445260e882901c90606490fd5b3b151590565b600061233c82516041146101b9611e67565b60008060006020850151925060408501519150606085015160001a9050600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156123b5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611d1e5750876001600160a01b0316816001600160a01b03161498975050505050505050565b60405180608001604052806000600f0b81526020016000600f0b815260200160008152602001600081525090565b60008083601f840112612435578081fd5b5081356001600160401b0381111561244b578182fd5b602083019150836020808302850101111561246557600080fd5b9250929050565b8035801515811461048557600080fd5b8051600f81900b811461048557600080fd5b60006020828403121561249f578081fd5b813561088a81612afc565b6000806000604084860312156124be578182fd5b83356124c981612afc565b925060208401356001600160401b038111156124e3578283fd5b6124ef86828701612424565b9497909650939450505050565b600080600060608486031215612510578283fd5b833561251b81612afc565b9250602061252a85820161246c565b925060408501356001600160401b0380821115612545578384fd5b818701915087601f830112612558578384fd5b81358181111561256457fe5b612576601f8201601f19168501612ad9565b9150808252888482850101111561258b578485fd5b808484018584013784848284010152508093505050509250925092565b600080604083850312156125ba578182fd5b82356125c581612afc565b915060208301356125d581612afc565b809150509250929050565b600080604083850312156125f2578182fd5b82356125fd81612afc565b946020939093013593505050565b6000806020838503121561261d578182fd5b82356001600160401b03811115612632578283fd5b61263e85828601612424565b90969095509350505050565b6000806000806040858703121561265f578081fd5b84356001600160401b0380821115612675578283fd5b61268188838901612424565b90965094506020870135915080821115612699578283fd5b506126a687828801612424565b95989497509550505050565b6000602082840312156126c3578081fd5b61088a8261246c565b600080600080608085870312156126e1578182fd5b84356126ec81612afc565b935060208501356126fc81612afc565b925060408501359150606085013561271381612afc565b939692955090935050565b60006080828403121561272f578081fd5b604051608081018181106001600160401b038211171561274b57fe5b6040526127578361247c565b81526127656020840161247c565b602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215612799578081fd5b5035919050565b6000602082840312156127b1578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015611f485783516001600160a01b03168352928401929184019160010161282a565b6020808252825182820181905260009190848201906040850190845b81811015611f485783518352928401929184019160010161286b565b901515815260200190565b90815260200190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252600d908201526c185b1c9958591e48195e1a5cdd609a1b604082015260600190565b60208082526008908201526708585b1b1bddd95960c21b604082015260600190565b6020808252601e908201527f4d6178696d756d20746f6b656e2062616c616e63652065786365656465640000604082015260600190565b60208082526006908201526521747769636560d01b604082015260600190565b602080825260059082015264217a65726f60d81b604082015260600190565b6020808252600b908201526a1bdb9b1e4819985d58d95d60aa1b604082015260600190565b60208082526027908201527f52657761726420646973747269627574696f6e20686173206e6f7420737461726040820152661d1959081e595d60ca1b606082015260800190565b6020808252818101527f43616e6e6f74207374617274206265666f72652063757272656e74207765656b604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b6020808252601290820152710626040eecacad6e640c8cad8c2f240dac2f60731b604082015260600190565b60208082526028908201527f5a65726f20746f74616c20737570706c7920726573756c747320696e206c6f736040820152677420746f6b656e7360c01b606082015260800190565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b6040518181016001600160401b0381118282101715612af457fe5b604052919050565b6001600160a01b038116811461045857600080fdfea2646970667358221220972c2bb8ecdbe63efa080ae50f636a301051bc328845b00b90454df26829a68764736f6c63430007060033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806390193b7c1161010f578063de681faf116100a2578063ed3a088711610071578063ed3a0887146103ea578063f213bd8c146103fd578063f851a44014610410578063fcaa54ee14610418576101e5565b8063de681faf146103a7578063e811f44b146103ba578063ece7514d146103cd578063ed24911d146103e2576101e5565b8063be203094116100de578063be20309414610366578063c2c4c5c114610379578063ca31879d14610381578063d3dc4ca114610394576101e5565b806390193b7c1461031a578063905d10ac1461032d578063a1648aa514610340578063acbc142814610353576101e5565b80634c9a47d8116101875780638050a7ee116101565780638050a7ee146102cc57806382aa5ad4146102df578063876e69a1146102e757806388720467146102fa576101e5565b80634c9a47d8146102805780634f3c50901461029357806375829def146102a65780637b8d6221146102b9576101e5565b8063338b5dea116101c3578063338b5dea1461023d5780633902b9bc14610250578063392e53cd14610263578063397bcd4114610278576101e5565b806308b0308a146101ea57806314866e08146102085780632308805b1461021d575b600080fd5b6101f261042b565b6040516101ff91906127b8565b60405180910390f35b61021b61021636600461248e565b61043f565b005b61023061022b36600461248e565b61045b565b6040516101ff9190612892565b61021b61024b3660046125e0565b61048a565b61021b61025e36600461248e565b610543565b61026b61058e565b6040516101ff9190612887565b6101f2610597565b61021b61028e3660046125e0565b6105a6565b6102306102a1366004612788565b610633565b61021b6102b436600461248e565b610645565b61021b6102c736600461264a565b6106df565b6102306102da3660046125a8565b61087e565b610230610893565b6102306102f536600461248e565b610899565b61030d6103083660046124aa565b6108c4565b6040516101ff919061284f565b61023061032836600461248e565b610a87565b61021b61033b36600461260b565b610aa2565b61026b61034e36600461248e565b610b35565b61023061036136600461248e565b610b53565b61021b6103743660046126cc565b610b7e565b61021b610d45565b61023061038f3660046125a8565b610d5f565b6102306103a23660046125e0565b610e41565b6102306103b53660046125e0565b610e69565b61021b6103c83660046126b2565b610e91565b6103d5610e9b565b6040516101ff919061280e565b610230610efd565b61026b6103f836600461248e565b610f0c565b61021b61040b36600461260b565b610f21565b6101f26110bc565b61021b6104263660046124fc565b6110cb565b60035461010090046001600160a01b031690565b610447611159565b61045081611170565b610458611566565b50565b6001600160a01b0381166000908152600b6020526040902054600160801b90046001600160801b03165b919050565b610492611159565b6001600160a01b0382166000908152600a602052604090205460ff166104d35760405162461bcd60e51b81526004016104ca906128e3565b60405180910390fd5b6104de82600061156d565b6104f36001600160a01b0383163330846118e8565b6104fe82600161156d565b7f95bf5847357310d24f8d03d8bad76c8ee329dfd3a3cb200df21c7bd1619e93bd828260405161052f9291906127f5565b60405180910390a161053f611566565b5050565b61054b611159565b6001600160a01b0381166000908152600a602052604090205460ff166105835760405162461bcd60e51b81526004016104ca906128e3565b61045081600161156d565b60035460ff1681565b6004546001600160a01b031681565b6001600160a01b0382166000908152600a602052604090205460ff166105de5760405162461bcd60e51b81526004016104ca906128e3565b6004546001600160a01b031633146106085760405162461bcd60e51b81526004016104ca9061297b565b61061382600061156d565b6106286001600160a01b0383163330846118e8565b61053f82600161156d565b60009081526007602052604090205490565b6008546001600160a01b0316331461066f5760405162461bcd60e51b81526004016104ca90612ab6565b6001600160a01b0381166106955760405162461bcd60e51b81526004016104ca90612a1c565b600880546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b6106e7611159565b6106f18382611942565b8260005b8181101561086e57600a600087878481811061070d57fe5b9050602002016020810190610722919061248e565b6001600160a01b0316815260208101919091526040016000205460ff1661075b5760405162461bcd60e51b81526004016104ca906128e3565b61078686868381811061076a57fe5b905060200201602081019061077f919061248e565b600061156d565b6107d0333086868581811061079757fe5b905060200201358989868181106107aa57fe5b90506020020160208101906107bf919061248e565b6001600160a01b03169291906118e8565b6107fb8686838181106107df57fe5b90506020020160208101906107f4919061248e565b600161156d565b7f95bf5847357310d24f8d03d8bad76c8ee329dfd3a3cb200df21c7bd1619e93bd86868381811061082857fe5b905060200201602081019061083d919061248e565b85858481811061084957fe5b9050602002013560405161085e9291906127f5565b60405180910390a16001016106f5565b5050610878611566565b50505050565b600061088a838361194f565b90505b92915050565b60065490565b6001600160a01b03166000908152600d6020526040902054600160401b90046001600160401b031690565b60606108ce611159565b836108d8816119cc565b6108e0611a04565b6108e985611170565b826000816001600160401b038111801561090257600080fd5b5060405190808252806020026020018201604052801561092c578160200160208202803683370190505b50905060005b82811015610a7357600a600088888481811061094a57fe5b905060200201602081019061095f919061248e565b6001600160a01b0316815260208101919091526040016000205460ff166109985760405162461bcd60e51b81526004016104ca906128e3565b6109a787878381811061076a57fe5b6109d1888888848181106109b757fe5b90506020020160208101906109cc919061248e565b611b58565b8282815181106109dd57fe5b60209081029190910101526004546001600160a01b031663c7b56abe888884818110610a0557fe5b9050602002016020810190610a1a919061248e565b6040518263ffffffff1660e01b8152600401610a3691906127b8565b600060405180830381600087803b158015610a5057600080fd5b505af1158015610a64573d6000803e3d6000fd5b50505050806001019050610932565b5092505050610a80611566565b9392505050565b6001600160a01b031660009081526020819052604090205490565b610aaa611159565b8060005b81811015610b2b57600a6000858584818110610ac657fe5b9050602002016020810190610adb919061248e565b6001600160a01b0316815260208101919091526040016000205460ff16610b145760405162461bcd60e51b81526004016104ca906128e3565b610b238484838181106107df57fe5b600101610aae565b505061053f611566565b6001600160a01b031660009081526001602052604090205460ff1690565b6001600160a01b03166000908152600b6020526040902054600160401b90046001600160401b031690565b60035460ff1615610ba15760405162461bcd60e51b81526004016104ca9061293c565b6003805460ff191660011790556001600160a01b03811615801590610bce57506001600160a01b03831615155b610bea5760405162461bcd60e51b81526004016104ca9061295c565b600880546001600160a01b038084166001600160a01b0319928316179092556004805486841692169190911790556003805491861661010002610100600160a81b0319909216919091179055610c3f82611d2a565b91506000610c4c42611d2a565b905080831015610c6e5760405162461bcd60e51b81526004016104ca906129e7565b80625c490001831115610c935760405162461bcd60e51b81526004016104ca90612a42565b80831415610d375760405163bd85b03960e01b81526000906001600160a01b0387169063bd85b03990610cca908590600401612892565b60206040518083038186803b158015610ce257600080fd5b505afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a91906127a0565b11610d375760405162461bcd60e51b81526004016104ca90612a6e565b505060058190556006555050565b610d4d611159565b610d55611a04565b610d5d611566565b565b6000610d69611159565b82610d73816119cc565b6001600160a01b0383166000908152600a602052604090205460ff16610dab5760405162461bcd60e51b81526004016104ca906128e3565b610db3611a04565b610dbc84611170565b610dc783600061156d565b6000610dd38585611b58565b600480546040516363dab55f60e11b81529293506001600160a01b03169163c7b56abe91610e03918891016127b8565b600060405180830381600087803b158015610e1d57600080fd5b505af1158015610e31573d6000803e3d6000fd5b509294505050505061088d611566565b6001600160a01b03919091166000908152600c60209081526040808320938352929052205490565b6001600160a01b03919091166000908152600e60209081526040808320938352929052205490565b6104583382611d36565b60606009805480602002602001604051908101604052809291908181526020018280548015610ef357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ed5575b5050505050905090565b6000610f07611d9a565b905090565b600a6020526000908152604090205460ff1681565b6008546001600160a01b03163314610f4b5760405162461bcd60e51b81526004016104ca90612ab6565b60005b818110156110b757600a6000848484818110610f6657fe5b9050602002016020810190610f7b919061248e565b6001600160a01b0316815260208101919091526040016000205460ff1615610fb55760405162461bcd60e51b81526004016104ca906128bc565b6001600a6000858585818110610fc757fe5b9050602002016020810190610fdc919061248e565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600983838381811061101257fe5b9050602002016020810190611027919061248e565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905582828281811061106557fe5b905060200201602081019061107a919061248e565b6001600160a01b03167f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a460405160405180910390a2600101610f4e565b505050565b6008546001600160a01b031681565b60007fbd291ffccec065968fe20c5f8debdad73ab50837733f357eeae8814178015a9084846110f987610a87565b60405160200180858152602001846001600160a01b03168152602001831515815260200182815260200194505050505060405160208183030381529060405280519060200120905061114f8482846101f8611e58565b6108788484611d36565b61116a600280541415610190611e67565b60028055565b60035460405163010ae75760e01b815260009161010090046001600160a01b03169063010ae757906111a69085906004016127b8565b60206040518083038186803b1580156111be57600080fd5b505afa1580156111d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f691906127a0565b9050806112035750610458565b6001600160a01b0382166000908152600d6020526040812080549091600160401b9091046001600160401b0316908161124c5761124585600554600087611e75565b9050611289565b42821061125c5750505050610458565b508154600160801b90046001600160801b0316601481850311156112895761128685838387611e75565b90505b80611292575060015b6003546040516328d09d4760e01b815260009161010090046001600160a01b0316906328d09d47906112ca90899086906004016127f5565b60806040518083038186803b1580156112e257600080fd5b505afa1580156112f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131a919061271e565b9050826113775760055442116113425760405162461bcd60e51b81526004016104ca906129a0565b61135a6005546113558360400151611f54565b611f64565b845467ffffffffffffffff19166001600160401b03821617855592505b61137f6123f6565b60005b6032811015611519578260400151851015801561139f5750868411155b1561147557600184019350829150868411156113e75760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611470565b6003546040516328d09d4760e01b81526101009091046001600160a01b0316906328d09d479061141d908b9088906004016127f5565b60806040518083038186803b15801561143557600080fd5b505afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d919061271e565b92505b611511565b42851061148157611519565b6000826040015186039050600081846020015102600f0b8460000151600f0b136114ac5760006114bd565b81846020015102846000015103600f0b5b9050801580156114cc57508886115b156114e3576114da42611f54565b96505050611519565b6001600160a01b038a166000908152600e602090815260408083208a84529091529020555062093a80909401935b600101611382565b505083546001600160801b0316600019929092016001600160401b03908116600160801b029290921767ffffffffffffffff60401b1916600160401b939092169290920217909155505050565b6001600255565b6001600160a01b0382166000908152600b6020526040812080549091600160401b9091046001600160401b031690816115ee574291506115ac42611d2a565b835467ffffffffffffffff19166001600160401b039190911617835560055442116115e95760405162461bcd60e51b81526004016104ca906129a0565b611640565b81420390508361164057600061160383611d2a565b61160c42611d2a565b1490506000620151804261161f42611f54565b0310905081801561162e575080155b1561163d57505050505061053f565b50505b825467ffffffffffffffff60401b1916600160401b426001600160401b0316021783556040516370a0823160e01b81526000906001600160a01b038716906370a08231906116929030906004016127b8565b60206040518083038186803b1580156116aa57600080fd5b505afa1580156116be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e291906127a0565b8454909150600090611705908390600160801b90046001600160801b0316611f70565b90508061171657505050505061053f565b6001600160801b0382111561173d5760405162461bcd60e51b81526004016104ca90612905565b600061174885611d2a565b6001600160a01b0389166000908152600c602052604081209192509081805b601481101561189f578462093a800193508342101561180a578715801561178d57508842145b1561179a578591506117ab565b878942038702816117a757fe5b0491505b6000858152602084905260409020546001600160801b03906117cd9084611f7e565b1161180557600085815260208490526040902080548301905589546001600160801b03600160801b808304821685018216029116178a555b61189f565b8715801561181757508884145b1561182457859150611835565b8789850387028161183157fe5b0491505b6000858152602084905260409020546001600160801b03906118579084611f7e565b1161188f57600085815260208490526040902080548301905589546001600160801b03600160801b808304821685018216029116178a555b9297508793508392600101611767565b507f9b7f1a85a4c9b4e59e1b6527d9969c50cdfb3a1a467d0c4a51fb0ed8bf07f1308b868a6040516118d39392919061289b565b60405180910390a15050505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610878908590611f90565b61053f8183146067611e67565b6001600160a01b038083166000908152600f60209081526040808320938516835292905290812054801561198457905061088d565b6001600160a01b038085166000908152600d60209081526040808320549387168352600b9091529020546119c4916001600160401b039081169116611f64565b949350505050565b6001600160a01b03811660009081526001602052604090205460ff161561045857610458336001600160a01b03831614610191611e67565b6006546000611a1242611d2a565b905080821180611a2157504281145b15611a2d575050610d5d565b600360019054906101000a90046001600160a01b03166001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a7d57600080fd5b505af1158015611a91573d6000803e3d6000fd5b5050505060005b6014811015611b515781831115611aae57611b51565b60035460405163bd85b03960e01b81526101009091046001600160a01b03169063bd85b03990611ae2908690600401612892565b60206040518083038186803b158015611afa57600080fd5b505afa158015611b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3291906127a0565b60008481526007602052604090205562093a8090920191600101611a98565b5050600655565b6001600160a01b0381166000908152600b6020526040812081611b7b858561194f565b6006546001600160a01b0387166000908152600d602052604081205492935091611be291611bc291611bbd9190600160401b90046001600160401b031661207a565b611f54565b8454611bdd90600160401b90046001600160401b0316611d2a565b61207a565b6001600160a01b038087166000908152600c60209081526040808320938b168352600e9091528120929350909190805b6014811015611c7e57848610611c2757611c7e565b600086815260076020526040902054611c3f57611c7e565b60008681526007602090815260408083205486835281842054928890529220540281611c6757fe5b62093a809790970196049190910190600101611c12565b506001600160a01b03808a166000908152600f60209081526040808320938c168352929052208590558015611d1e5785546001600160801b03600160801b80830482168490038216029116178655611ce06001600160a01b0389168a83612086565b7fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de689898388604051611d1594939291906127cc565b60405180910390a15b98975050505050505050565b62093a80908190040290565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915582519384529083015280517fac9874a7a931a3f5c9f202c6d9cf40de5d21506993c9f9c38ca8265add89584c9281900390910190a15050565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611e076120d8565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b610878848484600019856120dc565b8161053f5761053f81612133565b60008282825b6080811015611f4857818310611e9057611f48565b6003546040516328d09d4760e01b81526002858501810104916000916101009091046001600160a01b0316906328d09d4790611ed2908d9086906004016127f5565b60806040518083038186803b158015611eea57600080fd5b505afa158015611efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f22919061271e565b905088816040015111611f3757819450611f3e565b6001820393505b5050600101611e7b565b50909695505050505050565b600061088d62093a7f8301611d2a565b80820390821002900390565b600061088a83836001612143565b600082820161088a8482101583611e67565b600080836001600160a01b0316836040518082805190602001908083835b60208310611fcd5780518252601f199092019160209182019101611fae565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461202f576040519150601f19603f3d011682016040523d82523d6000602084013e612034565b606091505b5091509150600082141561204c573d6000803e3d6000fd5b610878815160001480612072575081806020019051602081101561206f57600080fd5b50515b6101a2611e67565b80820390821102900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526110b7908490611f90565b4690565b60006120e785612159565b90506120fd6120f78783876121a5565b83611e67565b61210c428410156101b8611e67565b5050506001600160a01b039092166000908152602081905260409020805460010190555050565b610458816210905360ea1b6122c3565b60006121528484111583611e67565b5050900390565b6000612163611d9a565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b60006121b9846001600160a01b0316612324565b156122b15760408051630b135d3f60e11b808252600482018681526024830193845285516044840152855191936001600160a01b03891693631626ba7e938993899390929091606490910190602085019080838360005b83811015612228578181015183820152602001612210565b50505050905090810190601f1680156122555780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d602081101561229d57600080fd5b50516001600160e01b031916149050610a80565b6122bc84848461232a565b9050610a80565b62461bcd60e51b600090815260206004526007602452600a808404818106603090810160081b958390069590950190829004918206850160101b01602363ffffff0060e086901c160160181b0190930160c81b60445260e882901c90606490fd5b3b151590565b600061233c82516041146101b9611e67565b60008060006020850151925060408501519150606085015160001a9050600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156123b5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611d1e5750876001600160a01b0316816001600160a01b03161498975050505050505050565b60405180608001604052806000600f0b81526020016000600f0b815260200160008152602001600081525090565b60008083601f840112612435578081fd5b5081356001600160401b0381111561244b578182fd5b602083019150836020808302850101111561246557600080fd5b9250929050565b8035801515811461048557600080fd5b8051600f81900b811461048557600080fd5b60006020828403121561249f578081fd5b813561088a81612afc565b6000806000604084860312156124be578182fd5b83356124c981612afc565b925060208401356001600160401b038111156124e3578283fd5b6124ef86828701612424565b9497909650939450505050565b600080600060608486031215612510578283fd5b833561251b81612afc565b9250602061252a85820161246c565b925060408501356001600160401b0380821115612545578384fd5b818701915087601f830112612558578384fd5b81358181111561256457fe5b612576601f8201601f19168501612ad9565b9150808252888482850101111561258b578485fd5b808484018584013784848284010152508093505050509250925092565b600080604083850312156125ba578182fd5b82356125c581612afc565b915060208301356125d581612afc565b809150509250929050565b600080604083850312156125f2578182fd5b82356125fd81612afc565b946020939093013593505050565b6000806020838503121561261d578182fd5b82356001600160401b03811115612632578283fd5b61263e85828601612424565b90969095509350505050565b6000806000806040858703121561265f578081fd5b84356001600160401b0380821115612675578283fd5b61268188838901612424565b90965094506020870135915080821115612699578283fd5b506126a687828801612424565b95989497509550505050565b6000602082840312156126c3578081fd5b61088a8261246c565b600080600080608085870312156126e1578182fd5b84356126ec81612afc565b935060208501356126fc81612afc565b925060408501359150606085013561271381612afc565b939692955090935050565b60006080828403121561272f578081fd5b604051608081018181106001600160401b038211171561274b57fe5b6040526127578361247c565b81526127656020840161247c565b602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215612799578081fd5b5035919050565b6000602082840312156127b1578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015611f485783516001600160a01b03168352928401929184019160010161282a565b6020808252825182820181905260009190848201906040850190845b81811015611f485783518352928401929184019160010161286b565b901515815260200190565b90815260200190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252600d908201526c185b1c9958591e48195e1a5cdd609a1b604082015260600190565b60208082526008908201526708585b1b1bddd95960c21b604082015260600190565b6020808252601e908201527f4d6178696d756d20746f6b656e2062616c616e63652065786365656465640000604082015260600190565b60208082526006908201526521747769636560d01b604082015260600190565b602080825260059082015264217a65726f60d81b604082015260600190565b6020808252600b908201526a1bdb9b1e4819985d58d95d60aa1b604082015260600190565b60208082526027908201527f52657761726420646973747269627574696f6e20686173206e6f7420737461726040820152661d1959081e595d60ca1b606082015260800190565b6020808252818101527f43616e6e6f74207374617274206265666f72652063757272656e74207765656b604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b6020808252601290820152710626040eecacad6e640c8cad8c2f240dac2f60731b604082015260600190565b60208082526028908201527f5a65726f20746f74616c20737570706c7920726573756c747320696e206c6f736040820152677420746f6b656e7360c01b606082015260800190565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b6040518181016001600160401b0381118282101715612af457fe5b604052919050565b6001600160a01b038116811461045857600080fdfea2646970667358221220972c2bb8ecdbe63efa080ae50f636a301051bc328845b00b90454df26829a68764736f6c63430007060033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newAdmin","type":"address"}],"name":"NewAdmin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"bool","name":"enabled","type":"bool"}],"name":"OnlyCallerOptIn","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"}],"name":"TokenAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lastCheckpointTimestamp","type":"uint256"}],"name":"TokenCheckpointed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"userTokenTimeCursor","type":"uint256"}],"name":"TokensClaimed","type":"event"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"}],"name":"addAllowedRewardTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"allowedRewardTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"checkpoint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"checkpointToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"name":"checkpointTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"checkpointUser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"claimToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"name":"claimTokens","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"depositTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"faucetDepositToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAllowedRewardTokens","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDomainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getNextNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTimeCursor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getTokenLastBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getTokenTimeCursor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"getTokensDistributedInWeek","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"getTotalSupplyAtTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"getUserBalanceAtTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getUserTimeCursor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getUserTokenTimeCursor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVotingEscrow","outputs":[{"internalType":"contract IVotingEscrow","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IVotingEscrow","name":"votingEscrow","type":"address"},{"internalType":"contract IRewardFaucet","name":"rewardFaucet_","type":"address"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"address","name":"admin_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"isOnlyCallerEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardFaucet","outputs":[{"internalType":"contract IRewardFaucet","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"enabled","type":"bool"}],"name":"setOnlyCallerCheck","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"bool","name":"enabled","type":"bool"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"setOnlyCallerCheckWithSignature","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newAdmin","type":"address"}],"name":"transferAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"}]}