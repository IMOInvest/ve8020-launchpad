{"abi":[{"type":"function","name":"checkpoint","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"checkpointToken","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"checkpointTokens","inputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"checkpointUser","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"claimToken","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"claimTokens","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"depositToken","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"depositTokens","inputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getTimeCursor","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTokenLastBalance","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTokenTimeCursor","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTokensDistributedInWeek","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"timestamp","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTotalSupplyAtTimestamp","inputs":[{"name":"timestamp","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getUserBalanceAtTimestamp","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"timestamp","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getUserTimeCursor","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getUserTokenTimeCursor","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getVotingEscrow","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IVotingEscrow"}],"stateMutability":"view"},{"type":"event","name":"NewAdmin","inputs":[{"name":"newAdmin","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RewardDeposit","inputs":[{"name":"token","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TokenAdded","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"TokenCheckpointed","inputs":[{"name":"token","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"lastCheckpointTimestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TokensClaimed","inputs":[{"name":"user","type":"address","indexed":false,"internalType":"address"},{"name":"token","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"userTokenTimeCursor","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"checkpoint()":"c2c4c5c1","checkpointToken(address)":"3902b9bc","checkpointTokens(address[])":"905d10ac","checkpointUser(address)":"14866e08","claimToken(address,address)":"ca31879d","claimTokens(address,address[])":"88720467","depositToken(address,uint256)":"338b5dea","depositTokens(address[],uint256[])":"7b8d6221","getTimeCursor()":"82aa5ad4","getTokenLastBalance(address)":"2308805b","getTokenTimeCursor(address)":"acbc1428","getTokensDistributedInWeek(address,uint256)":"d3dc4ca1","getTotalSupplyAtTimestamp(uint256)":"4f3c5090","getUserBalanceAtTimestamp(address,uint256)":"de681faf","getUserTimeCursor(address)":"876e69a1","getUserTokenTimeCursor(address,address)":"8050a7ee","getVotingEscrow()":"08b0308a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastCheckpointTimestamp\",\"type\":\"uint256\"}],\"name\":\"TokenCheckpointed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userTokenTimeCursor\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkpointToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"checkpointTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkpointUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenLastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getTokensDistributedInWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getTotalSupplyAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getUserBalanceAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserTokenTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Supports distributing arbitrarily many different tokens. In order to start distributing a new token to veBPT holders simply transfer the tokens to the `RewardDistributor` contract and then call `checkpointToken`.\",\"kind\":\"dev\",\"methods\":{\"checkpointToken(address)\":{\"details\":\"Any `token` balance held by the RewardDistributor above that which is returned by `getTokenLastBalance` will be distributed evenly across the time period since `token` was last checkpointed. This function will be called automatically before claiming tokens to ensure the contract is properly updated.\",\"params\":{\"token\":\"- The ERC20 token address to be checkpointed.\"}},\"checkpointTokens(address[])\":{\"details\":\"A version of `checkpointToken` which supports checkpointing multiple tokens. See `checkpointToken` for more details.\",\"params\":{\"tokens\":\"- An array of ERC20 token addresses to be checkpointed.\"}},\"checkpointUser(address)\":{\"params\":{\"user\":\"- The address of the user to be checkpointed.\"}},\"claimToken(address,address)\":{\"details\":\"It's not necessary to explicitly checkpoint before calling this function, it will ensure the RewardDistributor is up to date before calculating the amount of tokens to be claimed.\",\"params\":{\"token\":\"- The ERC20 token address to be claimed.\",\"user\":\"- The user on behalf of which to claim.\"},\"returns\":{\"_0\":\"The amount of `token` sent to `user` as a result of claiming.\"}},\"claimTokens(address,address[])\":{\"details\":\"A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`. See `claimToken` for more details.\",\"params\":{\"tokens\":\"- An array of ERC20 token addresses to be claimed.\",\"user\":\"- The user on behalf of which to claim.\"},\"returns\":{\"_0\":\"An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\"}},\"depositToken(address,uint256)\":{\"details\":\"Sending tokens directly to the RewardDistributor instead of using `depositTokens` may result in tokens being retroactively distributed to past weeks, or for the distribution to carry over to future weeks. If for some reason `depositTokens` cannot be called, in order to ensure that all tokens are correctly distributed manually call `checkpointToken` before and after the token transfer.\",\"params\":{\"amount\":\"- The amount of tokens to deposit.\",\"token\":\"- The ERC20 token address to distribute.\"}},\"depositTokens(address[],uint256[])\":{\"details\":\"A version of `depositToken` which supports depositing multiple `tokens` at once. See `depositToken` for more details.\",\"params\":{\"amounts\":\"- An array of token amounts to deposit.\",\"tokens\":\"- An array of ERC20 token addresses to distribute.\"}},\"getTokenTimeCursor(address)\":{\"params\":{\"token\":\"- The ERC20 token address to query.\"}},\"getTokensDistributedInWeek(address,uint256)\":{\"params\":{\"timestamp\":\"- The timestamp corresponding to the beginning of the week of interest.\",\"token\":\"- The ERC20 token address to query.\"}},\"getTotalSupplyAtTimestamp(uint256)\":{\"details\":\"Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values. This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.\",\"params\":{\"timestamp\":\"- The timestamp at which to read the cached total supply at.\"}},\"getUserBalanceAtTimestamp(address,uint256)\":{\"details\":\"Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values. This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.\",\"params\":{\"timestamp\":\"- The timestamp at which to read the `user`'s cached balance at.\",\"user\":\"- The address of the user of which to read the cached balance of.\"}},\"getUserTimeCursor(address)\":{\"params\":{\"user\":\"- The address of the user to query.\"}},\"getUserTokenTimeCursor(address,address)\":{\"params\":{\"token\":\"- The ERC20 token address to query.\",\"user\":\"- The address of the user to query.\"}}},\"title\":\"Reward Distributor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkpoint()\":{\"notice\":\"Caches the total supply of veBPT at the beginning of each week. This function will be called automatically before claiming tokens to ensure the contract is properly updated.\"},\"checkpointToken(address)\":{\"notice\":\"Assigns any newly-received tokens held by the RewardDistributor to weekly distributions.\"},\"checkpointTokens(address[])\":{\"notice\":\"Assigns any newly-received tokens held by the RewardDistributor to weekly distributions.\"},\"checkpointUser(address)\":{\"notice\":\"Caches the user's balance of veBPT at the beginning of each week. This function will be called automatically before claiming tokens to ensure the contract is properly updated.\"},\"claimToken(address,address)\":{\"notice\":\"Claims all pending distributions of the provided token for a user.\"},\"claimTokens(address,address[])\":{\"notice\":\"Claims a number of tokens on behalf of a user.\"},\"depositToken(address,uint256)\":{\"notice\":\"Deposits tokens to be distributed in the current week.\"},\"depositTokens(address[],uint256[])\":{\"notice\":\"Deposits tokens to be distributed in the current week.\"},\"getTimeCursor()\":{\"notice\":\"Returns the global time cursor representing the most earliest uncheckpointed week.\"},\"getTokenLastBalance(address)\":{\"notice\":\"Returns the RewardDistributor's cached balance of `token`.\"},\"getTokenTimeCursor(address)\":{\"notice\":\"Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.\"},\"getTokensDistributedInWeek(address,uint256)\":{\"notice\":\"Returns the amount of `token` which the RewardDistributor received in the week beginning at `timestamp`.\"},\"getTotalSupplyAtTimestamp(uint256)\":{\"notice\":\"Returns the cached total supply of veBPT as of the provided timestamp.\"},\"getUserBalanceAtTimestamp(address,uint256)\":{\"notice\":\"Returns the user's cached balance of veBPT as of the provided timestamp.\"},\"getUserTimeCursor(address)\":{\"notice\":\"Returns the user-level time cursor representing the most earliest uncheckpointed week.\"},\"getUserTokenTimeCursor(address,address)\":{\"notice\":\"Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.\"},\"getVotingEscrow()\":{\"notice\":\"Returns the VotingEscrow (veBPT) token contract\"}},\"notice\":\"Distributes any tokens transferred to the contract (e.g. Protocol rewards and any token emissions) among veBPT holders proportionally based on a snapshot of the week at which the tokens are sent to the RewardDistributor contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IRewardDistributor.sol\":\"IRewardDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@balancer-labs/=node_modules/@balancer-labs/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/interfaces/IRewardDistributor.sol\":{\"keccak256\":\"0xd2fbfdd46c04aea4fcc4bcfed61266371dc05621cad9276ac05c0467fbe1b4f0\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://fc6c490f292c1b15515ada6337775e3aaa3906d16d995ec05ede3316d11e1516\",\"dweb:/ipfs/QmdKSzSU1TPjPMrybc3GMWMYVXpS1NcwWp4SDsJhyRparY\"]},\"contracts/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0xaad81a1ad70ddaf1fa397351c0a661ab3ca2783114d4eb25ae4118c2ef80998f\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ccc6ff2007074b011d2471b67483c1de69c463bba7272b294006bf549b0c6468\",\"dweb:/ipfs/Qmf5PKKkxVTyRjXkjdJovPiH1o3U4GRSBaF6h8JF8uJnmY\"]},\"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac0d9f5ff03e0edeb07e1c400b78edea5948acff7e113ba52fd32f86cad72d\",\"dweb:/ipfs/Qmbh6C53fCjvjoHEVZHNadpRq5KZJzfHpDeR3qYfPgKvZt\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"newAdmin","type":"address","indexed":true}],"type":"event","name":"NewAdmin","anonymous":false},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"RewardDeposit","anonymous":false},{"inputs":[{"internalType":"address","name":"token","type":"address","indexed":true}],"type":"event","name":"TokenAdded","anonymous":false},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"uint256","name":"lastCheckpointTimestamp","type":"uint256","indexed":false}],"type":"event","name":"TokenCheckpointed","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":false},{"internalType":"contract IERC20","name":"token","type":"address","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"uint256","name":"userTokenTimeCursor","type":"uint256","indexed":false}],"type":"event","name":"TokensClaimed","anonymous":false},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"checkpoint"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"checkpointToken"},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"checkpointTokens"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"checkpointUser"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"claimToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"claimTokens","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"depositToken"},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"depositTokens"},{"inputs":[],"stateMutability":"view","type":"function","name":"getTimeCursor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getTokenLastBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getTokenTimeCursor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function","name":"getTokensDistributedInWeek","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function","name":"getTotalSupplyAtTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function","name":"getUserBalanceAtTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"getUserTimeCursor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getUserTokenTimeCursor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVotingEscrow","outputs":[{"internalType":"contract IVotingEscrow","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"checkpointToken(address)":{"details":"Any `token` balance held by the RewardDistributor above that which is returned by `getTokenLastBalance` will be distributed evenly across the time period since `token` was last checkpointed. This function will be called automatically before claiming tokens to ensure the contract is properly updated.","params":{"token":"- The ERC20 token address to be checkpointed."}},"checkpointTokens(address[])":{"details":"A version of `checkpointToken` which supports checkpointing multiple tokens. See `checkpointToken` for more details.","params":{"tokens":"- An array of ERC20 token addresses to be checkpointed."}},"checkpointUser(address)":{"params":{"user":"- The address of the user to be checkpointed."}},"claimToken(address,address)":{"details":"It's not necessary to explicitly checkpoint before calling this function, it will ensure the RewardDistributor is up to date before calculating the amount of tokens to be claimed.","params":{"token":"- The ERC20 token address to be claimed.","user":"- The user on behalf of which to claim."},"returns":{"_0":"The amount of `token` sent to `user` as a result of claiming."}},"claimTokens(address,address[])":{"details":"A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`. See `claimToken` for more details.","params":{"tokens":"- An array of ERC20 token addresses to be claimed.","user":"- The user on behalf of which to claim."},"returns":{"_0":"An array of the amounts of each token in `tokens` sent to `user` as a result of claiming."}},"depositToken(address,uint256)":{"details":"Sending tokens directly to the RewardDistributor instead of using `depositTokens` may result in tokens being retroactively distributed to past weeks, or for the distribution to carry over to future weeks. If for some reason `depositTokens` cannot be called, in order to ensure that all tokens are correctly distributed manually call `checkpointToken` before and after the token transfer.","params":{"amount":"- The amount of tokens to deposit.","token":"- The ERC20 token address to distribute."}},"depositTokens(address[],uint256[])":{"details":"A version of `depositToken` which supports depositing multiple `tokens` at once. See `depositToken` for more details.","params":{"amounts":"- An array of token amounts to deposit.","tokens":"- An array of ERC20 token addresses to distribute."}},"getTokenTimeCursor(address)":{"params":{"token":"- The ERC20 token address to query."}},"getTokensDistributedInWeek(address,uint256)":{"params":{"timestamp":"- The timestamp corresponding to the beginning of the week of interest.","token":"- The ERC20 token address to query."}},"getTotalSupplyAtTimestamp(uint256)":{"details":"Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values. This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.","params":{"timestamp":"- The timestamp at which to read the cached total supply at."}},"getUserBalanceAtTimestamp(address,uint256)":{"details":"Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values. This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.","params":{"timestamp":"- The timestamp at which to read the `user`'s cached balance at.","user":"- The address of the user of which to read the cached balance of."}},"getUserTimeCursor(address)":{"params":{"user":"- The address of the user to query."}},"getUserTokenTimeCursor(address,address)":{"params":{"token":"- The ERC20 token address to query.","user":"- The address of the user to query."}}},"version":1},"userdoc":{"kind":"user","methods":{"checkpoint()":{"notice":"Caches the total supply of veBPT at the beginning of each week. This function will be called automatically before claiming tokens to ensure the contract is properly updated."},"checkpointToken(address)":{"notice":"Assigns any newly-received tokens held by the RewardDistributor to weekly distributions."},"checkpointTokens(address[])":{"notice":"Assigns any newly-received tokens held by the RewardDistributor to weekly distributions."},"checkpointUser(address)":{"notice":"Caches the user's balance of veBPT at the beginning of each week. This function will be called automatically before claiming tokens to ensure the contract is properly updated."},"claimToken(address,address)":{"notice":"Claims all pending distributions of the provided token for a user."},"claimTokens(address,address[])":{"notice":"Claims a number of tokens on behalf of a user."},"depositToken(address,uint256)":{"notice":"Deposits tokens to be distributed in the current week."},"depositTokens(address[],uint256[])":{"notice":"Deposits tokens to be distributed in the current week."},"getTimeCursor()":{"notice":"Returns the global time cursor representing the most earliest uncheckpointed week."},"getTokenLastBalance(address)":{"notice":"Returns the RewardDistributor's cached balance of `token`."},"getTokenTimeCursor(address)":{"notice":"Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed."},"getTokensDistributedInWeek(address,uint256)":{"notice":"Returns the amount of `token` which the RewardDistributor received in the week beginning at `timestamp`."},"getTotalSupplyAtTimestamp(uint256)":{"notice":"Returns the cached total supply of veBPT as of the provided timestamp."},"getUserBalanceAtTimestamp(address,uint256)":{"notice":"Returns the user's cached balance of veBPT as of the provided timestamp."},"getUserTimeCursor(address)":{"notice":"Returns the user-level time cursor representing the most earliest uncheckpointed week."},"getUserTokenTimeCursor(address,address)":{"notice":"Returns the user-level time cursor storing the timestamp of the latest token distribution claimed."},"getVotingEscrow()":{"notice":"Returns the VotingEscrow (veBPT) token contract"}},"version":1}},"settings":{"remappings":["@balancer-labs/=node_modules/@balancer-labs/","@openzeppelin/=node_modules/@openzeppelin/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IRewardDistributor.sol":"IRewardDistributor"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/interfaces/IRewardDistributor.sol":{"keccak256":"0xd2fbfdd46c04aea4fcc4bcfed61266371dc05621cad9276ac05c0467fbe1b4f0","urls":["bzz-raw://fc6c490f292c1b15515ada6337775e3aaa3906d16d995ec05ede3316d11e1516","dweb:/ipfs/QmdKSzSU1TPjPMrybc3GMWMYVXpS1NcwWp4SDsJhyRparY"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVotingEscrow.sol":{"keccak256":"0xaad81a1ad70ddaf1fa397351c0a661ab3ca2783114d4eb25ae4118c2ef80998f","urls":["bzz-raw://ccc6ff2007074b011d2471b67483c1de69c463bba7272b294006bf549b0c6468","dweb:/ipfs/Qmf5PKKkxVTyRjXkjdJovPiH1o3U4GRSBaF6h8JF8uJnmY"],"license":"GPL-3.0-or-later"},"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol":{"keccak256":"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249","urls":["bzz-raw://8aac0d9f5ff03e0edeb07e1c400b78edea5948acff7e113ba52fd32f86cad72d","dweb:/ipfs/Qmbh6C53fCjvjoHEVZHNadpRq5KZJzfHpDeR3qYfPgKvZt"],"license":"MIT"}},"version":1},"id":5}