{"abi":[{"type":"function","name":"isOnlyCallerEnabled","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"setOnlyCallerCheck","inputs":[{"name":"enabled","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setOnlyCallerCheckWithSignature","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"enabled","type":"bool","internalType":"bool"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"OnlyCallerOptIn","inputs":[{"name":"user","type":"address","indexed":false,"internalType":"address"},{"name":"enabled","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"isOnlyCallerEnabled(address)":"a1648aa5","setOnlyCallerCheck(bool)":"e811f44b","setOnlyCallerCheckWithSignature(address,bool,bytes)":"fcaa54ee"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"OnlyCallerOptIn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isOnlyCallerEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setOnlyCallerCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setOnlyCallerCheckWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the OptionalOnlyCaller helper, used to opt in to a caller verification for a given address to methods that are otherwise callable by any address.\",\"events\":{\"OnlyCallerOptIn(address,bool)\":{\"details\":\"Emitted every time setOnlyCallerCheck is called.\"}},\"kind\":\"dev\",\"methods\":{\"isOnlyCallerEnabled(address)\":{\"details\":\"Returns true if caller verification is enabled for the given user, false otherwise.\"},\"setOnlyCallerCheck(bool)\":{\"details\":\"Enables / disables verification mechanism for caller.\",\"params\":{\"enabled\":\"- True if caller verification shall be enabled, false otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol\":\"IOptionalOnlyCaller\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@balancer-labs/=node_modules/@balancer-labs/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol\":{\"keccak256\":\"0x7bab0494ee39fb988722edd20b3e5ff747b4acfe93a62d0726c5d63ae3f6e472\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://23e1d154f2fa589cbfa51338c285cf1862edcd6172fdbb26db17a6fcf9581ee2\",\"dweb:/ipfs/Qmbu8wgFjYqZvvv84MKbLiHMSKv3THZuFHCjRchPHLjCdY\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":false},{"internalType":"bool","name":"enabled","type":"bool","indexed":false}],"type":"event","name":"OnlyCallerOptIn","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"isOnlyCallerEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bool","name":"enabled","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setOnlyCallerCheck"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"bool","name":"enabled","type":"bool"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"setOnlyCallerCheckWithSignature"}],"devdoc":{"kind":"dev","methods":{"isOnlyCallerEnabled(address)":{"details":"Returns true if caller verification is enabled for the given user, false otherwise."},"setOnlyCallerCheck(bool)":{"details":"Enables / disables verification mechanism for caller.","params":{"enabled":"- True if caller verification shall be enabled, false otherwise."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@balancer-labs/=node_modules/@balancer-labs/","@openzeppelin/=node_modules/@openzeppelin/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol":"IOptionalOnlyCaller"},"evmVersion":"paris","libraries":{}},"sources":{"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol":{"keccak256":"0x7bab0494ee39fb988722edd20b3e5ff747b4acfe93a62d0726c5d63ae3f6e472","urls":["bzz-raw://23e1d154f2fa589cbfa51338c285cf1862edcd6172fdbb26db17a6fcf9581ee2","dweb:/ipfs/Qmbu8wgFjYqZvvv84MKbLiHMSKv3THZuFHCjRchPHLjCdY"],"license":"GPL-3.0-or-later"}},"version":1},"id":26}